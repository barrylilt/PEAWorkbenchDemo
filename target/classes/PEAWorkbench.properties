##################################

job.create.dataset.name=JB_CREATE_DATASET_DEMO
step.create.dataset.name=ST_CREATE_DATASET_DEMO

JB_CREATE_DATASET_DEMO_INTERVAL=15000_9600

dev.JOB_URL=http://localhost:8080/Harmonizer/services/UnileverService.UnileverServiceHttpsSoap12Endpoint
sit.JOB_URL=http://localhost:8080/Harmonizer/services/UnileverService.UnileverServiceHttpsSoap12Endpoint
uat.JOB_URL=http://localhost:8080/Harmonizer/services/UnileverService.UnileverServiceHttpsSoap12Endpoint
prod.JOB_URL=http://localhost:8080/Harmonizer/services/UnileverService.UnileverServiceHttpsSoap12Endpoint

JOB_XML=<runJobById xmlns='http://server.ws.core.harmonizer.sl.com'><jobId>#!JOB_ID!#</jobId></runJobById>

###################################

COMMON.settings.session.timeout=30
COMMON.settings.export.drive=D
COMMON.settings.latest.svn.version=7166
opso.report.template.filename=OPSOTemplate.xlsx
COMMON.settings.saml.enabled=N
COMMON.settings.DBAuth.enabled=Y
COMMON.settings.splitter.date.format=::
COMMON.settings.upload.filepath=C:\\Demo\\PEA\\

###################################

Dashboard.jobRunStatistics.date.format=dd MMM yyyy HH:mm
Dashboard.jobRunStatistics.time.format=HH:mm

###################################

ViewExceptions.table=PRS.PROMOTION_FACT
#ViewExceptions.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select b.*, a.*,  	CONVERT(varchar(500),   		STUFF((   			SELECT  ','+ convert(varchar(25), a.OverlappingWith)   			FROM (   				select distinct PromoId PromoId, OverlappingWith OverlappingWith   				from [LND].[OVERLAPPING_PROMOTIONS]   				union   				select distinct OverlappingWith PromoId, PromoId OverlappingWith   				from [LND].[OVERLAPPING_PROMOTIONS]   			) a   			WHERE b.promoId = a.promoId   			GROUP BY a.promoId, a.OverlappingWith FOR XML PATH('')  		),1 ,1, '')  	) overlappingPromotions,   	cast(b.PromotionNotes as varchar(1000)) PromotionNotes1    FROM 	(  			select   				PROMOTIONID PROMOTIONID1,  				min( AnyPromoDollars ) AnyPromoDollars ,  				min( BaselineAnyPromoUnitVolume ) BaselineAnyPromoUnitVolume ,  				min( BaselineDollars ) BaselineDollars ,  				min( BaselineNonPromoUnitVol ) BaselineNonPromoUnitVol ,  				min( BaseSubsidy ) BaseSubsidy ,  				min( BaseTrdSpnd ) BaseTrdSpnd ,  				min( COGSNSVRate ) COGSNSVRate ,  				min( COGSUnitRate ) COGSUnitRate ,  				min( EDLPUnitRate ) EDLPUnitRate ,  				min( EquivalizedVolume ) EquivalizedVolume ,  				min( FixedTrdSpnd ) FixedTrdSpnd ,  				min( IncrementalDollars ) IncrementalDollars ,  				min( IncrNonPromoUnitVolumeSO ) IncrNonPromoUnitVolumeSO ,  				min( IncrPromoalTradeDiscUnitRate ) IncrPromoalTradeDiscUnitRate ,  				min( IncrVolumeLiftSO ) IncrVolumeLiftSO ,  				min( ListUnitPrice ) ListUnitPrice ,  				min( NonPromoDollars ) NonPromoDollars ,  				min( NSVPerUnit ) NSVPerUnit ,  				min( PercentACVAnyDisplay ) PercentACVAnyDisplay ,  				min( PercentACVAnyFeature ) PercentACVAnyFeature ,  				min( PlanNonPromoUnitPrice ) PlanNonPromoUnitPrice ,  				min( PlanPromoUnitPrice ) PlanPromoUnitPrice ,  				min( PlanScanUnitQty ) PlanScanUnitQty ,  				min( PlanShipUnitQty ) PlanShipUnitQty ,  				min( PromotedDollars ) PromotedDollars ,  				min( PrVarDiscUnitRate ) PrVarDiscUnitRate ,  				min( ShipmentEndWeek ) ShipmentEndWeek ,  				min( ShipmentStartWeek ) ShipmentStartWeek ,  				min( TotTrdSpnd ) TotTrdSpnd ,  				min( TotUnitVolumeSO ) TotUnitVolumeSO ,  				min( TotalShippedCases ) TotalShippedCases ,  				min( PlannedIncrementalROI ) PlannedIncrementalROI ,  				min( PlannedIncrementalGrossProfit ) PlannedIncrementalGrossProfit ,  				min( PlannedIncrementalTurnover ) PlannedIncrementalTurnover ,  				min( PlannedIncrementalNSV ) PlannedIncrementalNSV ,  				min( PlannedTotalNSV ) PlannedTotalNSV ,  				min( BaseNSV ) BaseNSV ,  				min( PlannedIncrementalTradeSpend ) PlannedIncrementalTradeSpend ,  				min( PlannedTotalTradeSpend ) PlannedTotalTradeSpend ,  				min( PlannedBaseTradeSpend ) PlannedBaseTradeSpend ,  				min( PlannedIncrementalCOGS ) PlannedIncrementalCOGS ,  				min( BaseCOGS ) BaseCOGS ,  				min( PlannedTotalCOGS ) PlannedTotalCOGS ,  				min( PlannedPlannedROI ) PlannedPlannedROI ,  				min( PlannedGrossProfit ) PlannedGrossProfit ,  				min( PlannedTotalTurnover ) PlannedTotalTurnover ,  				min( IncrementalROISellOut ) IncrementalROISellOut ,  				min( IncrementalGrossProfitSellOut ) IncrementalGrossProfitSellOut ,  				min( IncrementalTurnoverSellOut ) IncrementalTurnoverSellOut ,  				min( IncrementalNSVSellOut ) IncrementalNSVSellOut ,  				min( TotalNSVSellOut ) TotalNSVSellOut ,  				min( IncrementalTradeSpendSellOut ) IncrementalTradeSpendSellOut ,  				min( TotalTradeSpendSellOut ) TotalTradeSpendSellOut ,  				min( BaseTradeSpendSellOut ) BaseTradeSpendSellOut ,  				min( IncrementalCOGSSellOut ) IncrementalCOGSSellOut ,  				min( TotalCOGSSellOut ) TotalCOGSSellOut ,  				min( PlannedROISellOut ) PlannedROISellOut ,  				min( GrossProfitSellOut ) GrossProfitSellOut ,  				min( TotalTurnoverSellOut ) TotalTurnoverSellOut ,  				min( IncrementalROISellIn ) IncrementalROISellIn ,  				min( IncrementalGrossProfitSellIn ) IncrementalGrossProfitSellIn ,  				min( IncrementalTurnoverSellIn ) IncrementalTurnoverSellIn ,  				min( IncrementalNSVSellIn ) IncrementalNSVSellIn ,  				min( TotalNSVSellIn ) TotalNSVSellIn ,  				min( IncrementalTradeSpendSellIn ) IncrementalTradeSpendSellIn ,  				min( TotalTradeSpendSellIn ) TotalTradeSpendSellIn ,  				min( BaseTradeSpendSellIn ) BaseTradeSpendSellIn ,  				min( IncrementalCOGSSellIn ) IncrementalCOGSSellIn ,  				min( TotalCOGSSellIn ) TotalCOGSSellIn ,  				min( PlannedROISellIn ) PlannedROISellIn ,  				min( GrossProfitSellIn ) GrossProfitSellIn ,  				min( TotalTurnoverSellIn ) TotalTurnoverSellIn ,  				min( BaseUnitVolume ) BaseUnitVolume ,  				min( PlannedUnitVolume ) PlannedUnitVolume ,  				min( ActualUnitVolume ) ActualUnitVolume ,  				min( ShippedUnitVolume ) ShippedUnitVolume ,  				min( GSVperUnit ) GSVperUnit ,  				min( COGSperUnit ) COGSperUnit ,  				min( ScanUnitRate ) ScanUnitRate ,  				min( TotVarDiscUnitRate ) TotVarDiscUnitRate ,  				min( VarBillBackUnitRate ) VarBillBackUnitRate ,  				min( TotSalesValueSO ) TotSalesValueSO ,  				min( BaseUnitVolumeSO ) BaseUnitVolumeSO ,  				min( IncrUnitVolumeSO ) IncrUnitVolumeSO ,  				min( PromoUnitVolumeSO ) PromoUnitVolumeSO ,  				min( NonPromoUnitVolumeSO ) NonPromoUnitVolumeSO ,  				min( DollarShareOfCategory ) DollarShareOfCategory ,  				min( UnitShareOfCategory ) UnitShareOfCategory ,  				min( PercACVAnyPromo ) PercACVAnyPromo ,  				min( PercACVTempPriceReductionOnly ) PercACVTempPriceReductionOnly ,  				min( PercACVFeatwithoutDisp ) PercACVFeatwithoutDisp ,  				min( PercACVDispwithoutFeat ) PercACVDispwithoutFeat ,  				min( PercACVFeatandDisp ) PercACVFeatandDisp ,  				min( TQMP ) TQMP ,  				min( BaseUnitPriceSO ) BaseUnitPriceSO ,  				min( NonPromoUnitPriceSO ) NonPromoUnitPriceSO ,  				min( PromoUnitPriceSO ) PromoUnitPriceSO ,  				min( PercDisconAnyPromoUnit ) PercDisconAnyPromoUnit ,  				min( IncrAnyPromoUnitVolumeSO ) IncrAnyPromoUnitVolumeSO  			   			FROM	PRS.PROMOTION_FACT  			GROUP BY PROMOTIONID  		) a    		JOIN ( select t1.* from PRS.PROMO_DIM t1 ) b ON a.promotionID1 = b.promotionId and b.Promotion is not null   		and (('' <fltrDateRange>) or (b.PromotionEndDate <fltrDateRange> ) )  		and (('' in (<bizRule>)) or (select count(*) from [PRS].[PROMOTION_EXCEPTION_FACT] x WHERE x.promotionId = a.promotionId1 and x.ruleId in (<bizRule>)) > 0)   		and (('' in (<fltrProd>)) or (select count(*) from [PRS].[PROMOTION_FACT] x WHERE x.promotionId = a.promotionId1 and x.productId in (<fltrProd>)) > 0)   		and (('' in (<fltrCust>)) or (select count(*) from [PRS].[PROMOTION_FACT] x WHERE x.promotionId = a.promotionId1 and x.retailerId in (<fltrCust>)) > 0)   		left JOIN (   			select 	PromoId   			from 	(   				select 	distinct PromoId PromoId   				from 	[LND].[OVERLAPPING_PROMOTIONS]   				union   				select 	distinct OverlappingWith PromoId   				from 	[LND].[OVERLAPPING_PROMOTIONS]   			) xx   		) c ON b.PromoId = c.PromoId  ) x where <search_sql_clause> and <where_clause>) t
ViewExceptions.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select  b.PromoID, b.Promotion, b.PromotionCode, b.Retailer, b.PromotionStartDate, b.PromotionEndDate, b.PromotionNotes,  b.NaturalKey, b.NaturalKeyHash, b.RowHash, b.BatchID, b.CreatedDate, b.CreatedBy, b.UpdatedDate, b.UpdatedBy, a.*, (case when a.exceptionFlag = 'Y' then 'Exception' else 'Clean' end) ExceptionFlag2,	CONVERT(varchar(500),  		STUFF((  			SELECT  ','+ convert(varchar(25), a.OverlappingWith)  			FROM (  				select distinct PromoId PromoId, OverlappingWith OverlappingWith  				from [LND].[OVERLAPPING_PROMOTIONS]  				union  				select distinct OverlappingWith PromoId, PromoId OverlappingWith  				from [LND].[OVERLAPPING_PROMOTIONS]  			) a  			WHERE b.promoId = a.promoId  			GROUP BY a.promoId, a.OverlappingWith FOR XML PATH('') 		),1 ,1, '') 	) overlappingPromotions, CONVERT(varchar(500),  STUFF((SELECT  ','+ convert(varchar(25), a.RuleID) FROM (select distinct PromotionId, ProductId, RuleId	from prs.promotion_exception_fact a	) a	WHERE b.promotionId = a.PromotionId	GROUP BY a.PromotionId, a.RuleID FOR XML PATH('') 		),1 ,1, '') 	) BizRules, 	cast(b.PromotionNotes as varchar(1000)) PromotionNotes1  FROM 	PRS.PROMOTION_FACT_GROUP_new a   		JOIN ( select t1.* from PRS.PROMO_DIM t1 ) b ON a.promotionId = b.promotionId and b.Promotion is not null  		and (('' <fltrDateRange>) or (b.PromotionEndDate <fltrDateRange> ) ) 		and (('' in (<bizRule>)) or (select count(*) from [PRS].[PROMOTION_EXCEPTION_FACT] x WHERE x.promotionId = a.promotionId and x.ruleId in (<bizRule>)) > 0)  		and (('' in (<fltrProdCategorySelect>)) or (select count(*) from [PRS].[PROMOTION_FACT] x JOIN PRS.PRODUCT_DIM x1 ON x.promotionId = a.promotionId AND x.productId = x1.ProdID AND x1.LEVEL2NAME in (<fltrProdCategorySelect>)) > 0)  		and (('' in (<fltrCust>)) or (select count(*) from [PRS].[PROMOTION_FACT] x WHERE x.promotionId = a.promotionId and x.retailerId in (<fltrCust>)) > 0)  		left JOIN (  			select 	PromoId  			from 	(  				select 	distinct PromoId PromoId  				from 	[LND].[OVERLAPPING_PROMOTIONS]  				union  				select 	distinct OverlappingWith PromoId  				from 	[LND].[OVERLAPPING_PROMOTIONS]  			) xx  		) c ON b.PromoId = c.PromoId  ) x where <search_sql_clause> and <where_clause>) t
ViewExceptions.column.mapping=COL0:PromotionID:PromotionID:N:80:0|COL1:PromoID:Promo ID:S:80:0|COL2:Promotion:Promotion:S:150:0|COL3:PromotionCode:Promotion Code:S:80:0|COL4:Retailer:Retailer:S:120:0|COL5:PromotionStartDate:Promotion Start Date:D:80:0|COL6:PromotionEndDate:Promotion End Date:D:80:0|COL7:PromotionNotes:Promotion Notes:S:150:0|COL8:NaturalKey:NaturalKey:S:80:0|COL9:NaturalKeyHash:NaturalKeyHash:S:80:0|COL10:RowHash:RowHash:S:80:0|COL11:BatchID:BatchID:N:80:0|COL12:CreatedDate:Created Date:D:80:0|COL13:CreatedBy:Created By:S:80:0|COL14:UpdatedDate:Updated Date:D:80:0|COL15:UpdatedBy:Updated By:S:80:0|COL16:AnyPromoDollars:Any Promo Dollars:N:80:2|COL17:BaselineAnyPromoUnitVolume:Baseline Any Promo Unit Volume:N:80:2|COL18:BaselineDollars:Baseline Dollars:N:80:2|COL19:BaselineNonPromoUnitVol:Baseline Non Promo Unit Vol:N:80:2|COL20:BaseSubsidy:Base Subsidy:N:80:2|COL21:BaseTrdSpnd:Base Trade Spend:N:80:2|COL22:COGSNSVRate:COGS NSV Rate:N:80:2|COL23:COGSUnitRate:COGS Unit Rate:N:80:2|COL24:EDLPUnitRate:EDLP Unit Rate:N:80:2|COL25:EquivalizedVolume:Equivalized Volume:N:80:2|COL26:FixedTrdSpnd:Fixed Trade Spend:N:80:2|COL27:IncrementalDollars:Incremental Dollars:N:80:2|COL28:IncrNonPromoUnitVolumeSO:Incr Non Promo Unit Volume SO:N:80:2|COL29:IncrPromoalTradeDiscUnitRate:Incr Promoal Trade Disc Unit Rate:N:80:2|COL30:IncrVolumeLiftSO:Incr Volume Lift SO:N:80:2|COL31:ListUnitPrice:List Unit Price:N:80:2|COL32:NonPromoDollars:Non Promo Dollars:N:80:2|COL33:NSVPerUnit:NSV Per Unit:N:80:2|COL34:PercentACVAnyDisplay:Percent ACV Any Display:N:80:2|COL35:PercentACVAnyFeature:Percent ACV Any Feature:N:80:2|COL36:PlanNonPromoUnitPrice:Plan Non Promo Unit Price:N:80:2|COL37:PlanPromoUnitPrice:Plan Promo Unit Price:N:80:2|COL38:PlanScanUnitQty:Plan Scan Unit Qty:N:80:2|COL39:PlanShipUnitQty:Plan Ship Unit Qty:N:80:2|COL40:PromotedDollars:Promoted Dollars:N:80:2|COL41:PrVarDiscUnitRate:Pr Var Disc Unit Rate:N:80:2|COL42:ShipmentEndWeek:Shipment End Week:N:80:2|COL43:ShipmentStartWeek:Shipment Start Week:N:80:2|COL44:TotTrdSpnd:Tot Trade Spend:N:80:2|COL45:TotUnitVolumeSO:Tot Unit Volume SO:N:80:2|COL46:TotalShippedCases:Total Shipped Cases:N:80:2|COL47:PlannedIncrementalROI:Planned Incremental ROI:N:80:2|COL48:PlannedIncrementalGrossProfit:Planned Incremental Gross Profit:N:80:2|COL49:PlannedIncrementalTurnover:Planned Incremental Turnover:N:80:2|COL50:PlannedIncrementalNSV:Planned Incremental NSV:N:80:2|COL51:PlannedTotalNSV:Planned Total NSV:N:80:2|COL52:BaseNSV:Base NSV:N:80:2|COL53:PlannedIncrementalTradeSpend:Planned Incremental Trade Spend:N:80:2|COL54:PlannedTotalTradeSpend:Planned Total Trade Spend:N:80:2|COL55:PlannedBaseTradeSpend:Planned Base Trade Spend:N:80:2|COL56:PlannedIncrementalCOGS:Planned Incremental COGS:N:80:2|COL57:BaseCOGS:Base COGS:N:80:2|COL58:PlannedTotalCOGS:Planned Total COGS:N:80:2|COL59:PlannedPlannedROI:Planned Planned ROI:N:80:2|COL60:PlannedGrossProfit:Planned Gross Profit:N:80:2|COL61:PlannedTotalTurnover:Planned Total Turnover:N:80:2|COL62:IncrementalROISellOut:Incremental ROI SellOut:N:80:2|COL63:IncrementalGrossProfitSellOut:Incremental Gross Profit SellOut:N:80:2|COL64:IncrementalTurnoverSellOut:Incremental Turnover SellOut:N:80:2|COL65:IncrementalNSVSellOut:Incremental NSV SellOut:N:80:2|COL66:TotalNSVSellOut:Total NSV SellOut:N:80:2|COL67:IncrementalTradeSpendSellOut:Incremental Trade Spend SellOut:N:80:2|COL68:TotalTradeSpendSellOut:Total Trade Spend SellOut:N:80:2|COL69:BaseTradeSpendSellOut:Base Trade Spend SellOut:N:80:2|COL70:IncrementalCOGSSellOut:Incremental COGS SellOut:N:80:2|COL71:TotalCOGSSellOut:Total COGS SellOut:N:80:2|COL72:PlannedROISellOut:Planned ROI SellOut:N:80:2|COL73:GrossProfitSellOut:Gross Profit SellOut:N:80:2|COL74:TotalTurnoverSellOut:Total Turnover SellOut:N:80:2|COL75:IncrementalROISellIn:Incremental ROI SellIn:N:80:2|COL76:IncrementalGrossProfitSellIn:Incremental Gross Profit SellIn:N:80:2|COL77:IncrementalTurnoverSellIn:Incremental Turnover SellIn:N:80:2|COL78:IncrementalNSVSellIn:Incremental NSV SellIn:N:80:2|COL79:TotalNSVSellIn:Total NSV SellIn:N:80:2|COL80:IncrementalTradeSpendSellIn:Incremental Trade Spend SellIn:N:80:2|COL81:TotalTradeSpendSellIn:Total Trade Spend SellIn:N:80:2|COL82:BaseTradeSpendSellIn:Base Trade Spend SellIn:N:80:2|COL83:IncrementalCOGSSellIn:Incremental COGS SellIn:N:80:2|COL84:TotalCOGSSellIn:Total COGS SellIn:N:80:2|COL85:PlannedROISellIn:Planned ROI SellIn:N:80:2|COL86:GrossProfitSellIn:Gross Profit SellIn:N:80:2|COL87:TotalTurnoverSellIn:Total Turnover SellIn:N:80:2|COL88:BaseUnitVolume:Base Unit Volume:N:80:2|COL89:PlannedUnitVolume:Planned Unit Volume:N:80:2|COL90:ActualUnitVolume:Actual Unit Volume:N:80:2|COL91:ShippedUnitVolume:Shipped Unit Volume:N:250:2|COL92:GSVperUnit:GSV per Unit:N:80:2|COL93:COGSperUnit:COGS per Unit:N:80:2|COL94:ScanUnitRate:Scan Unit Rate:N:80:2|COL95:TotVarDiscUnitRate:Tot Var Disc Unit Rate:N:80:2|COL96:VarBillBackUnitRate:Var Bill Back Unit Rate:N:80:2|COL97:TotSalesValueSO:Tot Sales Value SO:N:80:2|COL98:BaseUnitVolumeSO:Base Unit Volume SO:N:80:2|COL99:IncrUnitVolumeSO:Incr Unit Volume SO:N:80:2|COL100:PromoUnitVolumeSO:Promo Unit Volume SO:N:80:2|COL101:NonPromoUnitVolumeSO:Non Promo Unit Volume SO:N:80:2|COL102:DollarShareOfCategory:Dollar Share Of Category:N:80:2|COL103:UnitShareOfCategory:Unit Share Of Category:N:80:2|COL104:PercACVAnyPromo:Perc ACV Any Promo:N:80:2|COL105:PercACVTempPriceReductionOnly:Perc ACV Temp Price Reduction Only:N:80:2|COL106:PercACVFeatwithoutDisp:Perc ACV Feat without Disp:N:80:2|COL107:PercACVDispwithoutFeat:Perc ACV Disp without Feat:N:80:2|COL108:PercACVFeatandDisp:Perc ACV Feat and Disp:N:80:2|COL109:TQMP:TQMP:N:80:2|COL110:BaseUnitPriceSO:Base Unit Price SO:N:80:2|COL111:NonPromoUnitPriceSO:Non Promo Unit Price SO:N:80:2|COL112:PromoUnitPriceSO:Promo Unit Price SO:N:80:2|COL113:PercDisconAnyPromoUnit:Perc Disc on Any Promo Unit:N:80:2|COL114:IncrAnyPromoUnitVolumeSO:Incr Any Promo Unit VolumeSO:N:80:2|COL115:overlappingPromotions:overlapping Promotions:S:80:0|COL116:ExceptionFlag2:Exception Flag:S:80:0|COL117:BizRules:Biz Rules:S:80:0
ViewExceptions.column.editable=COL16:T|COL17:T
ViewExceptions.key.column.idx=0
ViewExceptions.highlight.rule.column=COL26:FixedTrdSpnd|COL90:ActualUnitVolume
#ViewExceptions.deletable=ON
ViewExceptions.column.hidden=0|8|9|10|11|115|117
ViewExceptions.column.trim=4:20|7:20
#ViewExceptions.column.currency=26|27
#ViewExceptions.column.percentage=5|28|29|39|54|55|56|58|84|69|70|82|83|84
#ViewExceptions.session.cache=ON
#ViewExceptions.key.column.idx=0
ViewExceptions.date.format=dd MMM yyyy
#Col:<Req_param>
#ViewExceptions.where.clause=COL86:fltrStatus:MS:like|COL4:fltrCustId:MS:like|COL2:fltrProdId:MS:like|COL87:fltrInStoreDate:SS:between
#ViewExceptions.where.clause=COL86:fltrStatus:MS:like|COL97:fltrPromoStatus:MS:like
ViewExceptions.where.clause=COL116:fltrStatus:MS:like
#|COL87:fltrInStoreDate:SS:between|COL89:fltrPromoType:SS:=
#ViewExceptions.sql.replace.req.param=<prodCategory>:fltrProdCategorySelect:MS:''|<prodBrand>:fltrProdBrandSelect:MS:''|<bizRule>:fltrBizRuleSelect:MS:''|<fltrProd>:fltrProdId:MS:''|<fltrCust>:fltrCustId:MS:''|<fltrDateRange>:fltrInStoreDate:between:''|<promoType>:fltrPromoType:SS:''
ViewExceptions.sql.replace.req.param=<bizRule>:fltrBizRuleSelect:MS:''|<fltrProdCategorySelect>:fltrProdCategorySelect:MS:''|<fltrCust>:fltrCustId:MS:''|<fltrDateRange>:fltrInStoreDate:between:''



OverlappingPromotios.table=PRS.PROMOTION_FACT
#OverlappingPromotios.query.sql=select t.* from (select <columns>, row_number() over ( order by <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from LND.SBL_PROMOTION_BASIC) t
OverlappingPromotios.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from (select a.promoId,  c.promotion, a.TUEAN,a.SpendType,a.TTBlock,a.Invoiceterms,b.PlannedTradeSpend from [LND].[SBL_PROMOTED_PRODUCT_SPEND] a join  [LND].[AGR_PROMOTED_PRODUCT_SPEND] b on a.promoId = b.promoId join PRS.PROMO_DIM c on a.promoId = c.promoId where a.promoid in(select overlappingWith from [LND].[OVERLAPPING_PROMOTIONS] where promoId = '<promoId>')) x where <search_sql_clause> and <where_clause>) t 
OverlappingPromotios.column.mapping=COL0:promoId:Promotion Id:S:80:0|COL1:Promotion:Promotion:S:80:0|COL2:TUEAN:ProdEANTUCode:S:80:0|COL3:Invoiceterms:Spend Invoice Term:S:80:0|COL4:TTBlock:TTS Blocks Hierarchy:S:80:0|COL5:SpendType:Spend Type:S:80:0|COL6:PlannedTradeSpend:Planned Total Promo Spend:N:80:2
#OverlappingPromotios.column.editable=COL1:T
#OverlappingPromotios.deletable=ON
OverlappingPromotios.column.hidden=0
#OverlappingPromotios.session.cache=ON
#OverlappingPromotios.key.column.idx=0
OverlappingPromotios.date.format=dd/MM/yyyy
#Col:<Req_param>
#OverlappingPromotios.where.clause=COL86:fltrStatus:MS:like|COL4:fltrCustId:MS:like|COL2:fltrProdId:MS:like|COL87:fltrInStoreDate:SS:between
#OverlappingPromotios.where.clause=COL86:fltrStatus:MS:like|COL87:fltrInStoreDate:SS:between
OverlappingPromotios.sql.replace.req.param=<promoId>:fltrPromoId



ViewPromotedProducts.table=PRS.PROMOTION_FACT
ViewPromotedProducts.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select case when t.BusinessRules is null then 'Clean' else 'Exception' end ExceptionFlag2,	t.* from (  		select		f.retailer retailer, d.ProductName productName, f.promotion, f.PromoId, CONVERT(varchar(100),		STUFF(( SELECT  ','+ convert(varchar(25), t1.ruleId) FROM [PRS].[PROMOTION_EXCEPTION_FACT] t1 WHERE t1.promotionId = a.promotionId and t1.ProductId = a.ProductId group by t1.promotionId, t1.productId, t1.ruleId  FOR XML PATH('')),1 ,1, '')) BusinessRules ,  					a.*,		g.MxBaselineDeviationGT10Percent,		isNull(g.MxNewColouriTO, 'Green') MxNewColouriTO,		isNull(g.MxNewColouriGP, 'Green') MxNewColouriGP,		isNull(g.MxColourByCategory, 'Green') MxColourByCategory,		g.MxCheckInactiveProducts, g.MxCheckPriceCostMissing			from 	PRS.PROMOTION_FACT a 		join PRS.PRODUCT_DIM d on a.productId = d.PRODID 	  					join PRS.PROMO_DIM f on f.PromotionID = a.promotionId  					left join ( 							select					PromotionId, ProductId, 				max(BaselineDeviationGT10Percent) MxBaselineDeviationGT10Percent, 				max(NewColouriTO) MxNewColouriTO, 				max(NewColouriGP) MxNewColouriGP, 				max(ColourByCategory) MxColourByCategory, 				max(CheckInactiveProducts) MxCheckInactiveProducts, 				max(CheckPriceCostMissing) MxCheckPriceCostMissing 							FROM [PRS].[PROMOTION_EXCEPTION_FACT] 							group by PromotionId, ProductId			) g on a.PromotionId = g.PromotionId and a.ProductId = g.ProductId				) t		 ) x where <search_sql_clause> and <where_clause>) t
ViewPromotedProducts.column.mapping=COL0:PromotionID:PromotionID:N:80:0|COL1:PromoID:Promo ID:S:80:0|COL2:Promotion:Promotion:S:120:0|COL3:Retailer:Retailer:S:120:0|COL4:AnyPromoDollars:Any Promo Dollars:N:80:2|COL5:BaselineAnyPromoUnitVolume:Baseline Any Promo Unit Volume:N:80:2|COL6:BaselineDollars:Baseline Dollars:N:80:2|COL7:BaselineNonPromoUnitVol:Baseline Non Promo Unit Vol:N:80:2|COL8:BaseSubsidy:Base Subsidy:N:80:2|COL9:BaseTrdSpnd:Base Trade Spend:N:80:2|COL10:COGSNSVRate:COGS NSV Rate:N:80:2|COL11:COGSUnitRate:COGS Unit Rate:N:80:2|COL12:EDLPUnitRate:EDLP Unit Rate:N:80:2|COL13:EquivalizedVolume:Equivalized Volume:N:80:2|COL14:FixedTrdSpnd:Fixed Trade Spend:N:80:2|COL15:IncrementalDollars:Incremental Dollars:N:80:2|COL16:IncrNonPromoUnitVolumeSO:Incr Non Promo Unit VolumeSO:N:80:2|COL17:IncrPromoalTradeDiscUnitRate:Incr Promoal Trade Disc Unit Rate:N:80:2|COL18:IncrVolumeLiftSO:Incr Volume Lift SO:N:80:2|COL19:ListUnitPrice:List Unit Price:N:80:2|COL20:NonPromoDollars:Non Promo Dollars:N:80:2|COL21:NSVPerUnit:NSV Per Unit:N:80:2|COL22:PercentACVAnyDisplay:Percent ACV Any Display:N:80:2|COL23:PercentACVAnyFeature:Percent ACV Any Feature:N:80:2|COL24:PlanNonPromoUnitPrice:Plan Non Promo Unit Price:N:80:2|COL25:PlanPromoUnitPrice:Plan Promo Unit Price:N:80:2|COL26:PlanScanUnitQty:Plan Scan Unit Qty:N:80:2|COL27:PlanShipUnitQty:Plan Ship Unit Qty:N:80:2|COL28:PromotedDollars:Promoted Dollars:N:80:2|COL29:PrVarDiscUnitRate:Pr Var Disc Unit Rate:N:80:2|COL30:ShipmentEndWeek:Shipment End Week:N:80:2|COL31:ShipmentStartWeek:Shipment Start Week:N:80:2|COL32:TotTrdSpnd:Tot Trade Spend:N:80:2|COL33:TotUnitVolumeSO:Tot Unit Volume SO:N:80:2|COL34:TotalShippedCases:Total Shipped Cases:N:80:2|COL35:PlannedIncrementalROI:Planned Incremental ROI:N:80:2|COL36:PlannedIncrementalGrossProfit:Planned Incremental Gross Profit:N:80:2|COL37:PlannedIncrementalTurnover:Planned Incremental Turnover:N:80:2|COL38:PlannedIncrementalNSV:Planned Incremental NSV:N:80:2|COL39:PlannedTotalNSV:Planned Total NSV:N:80:2|COL40:BaseNSV:Base NSV:N:80:2|COL41:PlannedIncrementalTradeSpend:Planned Incremental Trade Spend:N:80:2|COL42:PlannedTotalTradeSpend:Planned Total Trade Spend:N:80:2|COL43:PlannedBaseTradeSpend:Planned Base Trade Spend:N:80:2|COL44:PlannedIncrementalCOGS:Planned Incremental COGS:N:80:2|COL45:BaseCOGS:Base COGS:N:80:2|COL46:PlannedTotalCOGS:Planned Total COGS:N:80:2|COL47:PlannedPlannedROI:Planned Planned ROI:N:80:2|COL48:PlannedGrossProfit:Planned Gross Profit:N:80:2|COL49:PlannedTotalTurnover:Planned Total Turnover:N:80:2|COL50:IncrementalROISellOut:Incremental ROI SellOut:N:80:2|COL51:IncrementalGrossProfitSellOut:Incremental Gross Profit SellOut:N:80:2|COL52:IncrementalTurnoverSellOut:Incremental Turnover SellOut:N:80:2|COL53:IncrementalNSVSellOut:Incremental NSV SellOut:N:80:2|COL54:TotalNSVSellOut:Total NSV SellOut:N:80:2|COL55:IncrementalTradeSpendSellOut:Incremental Trade Spend SellOut:N:80:2|COL56:TotalTradeSpendSellOut:Total Trade Spend SellOut:N:80:2|COL57:BaseTradeSpendSellOut:Base Trade Spend SellOut:N:80:2|COL58:IncrementalCOGSSellOut:Incremental COGS SellOut:N:80:2|COL59:TotalCOGSSellOut:Total COGS SellOut:N:80:2|COL60:PlannedROISellOut:Planned ROI SellOut:N:80:2|COL61:GrossProfitSellOut:Gross Profit SellOut:N:80:2|COL62:TotalTurnoverSellOut:Total Turnover SellOut:N:80:2|COL63:IncrementalROISellIn:Incremental ROI SellIn:N:80:2|COL64:IncrementalGrossProfitSellIn:Incremental Gross Profit SellIn:N:80:2|COL65:IncrementalTurnoverSellIn:Incremental Turnover SellIn:N:80:2|COL66:IncrementalNSVSellIn:Incremental NSV SellIn:N:80:2|COL67:TotalNSVSellIn:Total NSV SellIn:N:80:2|COL68:IncrementalTradeSpendSellIn:Incremental Trade Spend SellIn:N:80:2|COL69:TotalTradeSpendSellIn:Total Trade Spend SellIn:N:80:2|COL70:BaseTradeSpendSellIn:Base Trade Spend SellIn:N:80:2|COL71:IncrementalCOGSSellIn:Incremental COGS SellIn:N:80:2|COL72:TotalCOGSSellIn:Total COGS SellIn:N:80:2|COL73:PlannedROISellIn:Planned ROI SellIn:N:80:2|COL74:GrossProfitSellIn:Gross Profit SellIn:N:80:2|COL75:TotalTurnoverSellIn:Total Turnover SellIn:N:80:2|COL76:BaseUnitVolume:Base Unit Volume:N:80:2|COL77:PlannedUnitVolume:Planned Unit Volume:N:80:2|COL78:ActualUnitVolume:Actual Unit Volume:N:80:2|COL79:ShippedUnitVolume:Shipped Unit Volume:N:250:2|COL80:GSVperUnit:GSV per Unit:N:80:2|COL81:COGSperUnit:COGS per Unit:N:80:2|COL82:ScanUnitRate:Scan Unit Rate:N:80:2|COL83:TotVarDiscUnitRate:Tot Var Disc Uni tRate:N:80:2|COL84:VarBillBackUnitRate:Var Bill Back Unit Rate:N:80:2|COL85:TotSalesValueSO:Tot Sales Value SO:N:80:2|COL86:BaseUnitVolumeSO:Base Unit VolumeSO:N:80:2|COL87:IncrUnitVolumeSO:Incr Unit VolumeSO:N:80:2|COL88:PromoUnitVolumeSO:Promo Unit VolumeSO:N:80:2|COL89:NonPromoUnitVolumeSO:Non Promo Unit VolumeSO:N:80:2|COL90:DollarShareOfCategory:Dollar Share Of Category:N:80:2|COL91:UnitShareOfCategory:Unit Share Of Category:N:80:2|COL92:PercACVAnyPromo:Perc ACV Any Promo:N:80:2|COL93:PercACVTempPriceReductionOnly:Perc ACV Temp Price Reduction Only:N:80:2|COL94:PercACVFeatwithoutDisp:Perc ACV Feat without Disp:N:80:2|COL95:PercACVDispwithoutFeat:Perc ACV Disp without Feat:N:80:2|COL96:PercACVFeatandDisp:Perc ACV Feat and Disp:N:80:2|COL97:TQMP:TQMP:N:80:2|COL98:BaseUnitPriceSO:Base Unit Price SO:N:80:2|COL99:NonPromoUnitPriceSO:Non Promo Unit Price SO:N:80:2|COL100:PromoUnitPriceSO:Promo Unit Price SO:N:80:2|COL101:PercDisconAnyPromoUnit:Perc Disc on Any Promo Unit:N:80:2|COL102:IncrAnyPromoUnitVolumeSO:Incr Any Promo Unit Volume SO:N:80:2|COL103:ExceptionFlag:Exception Flag:S:80:0|COL104:PromotionFactID:Promotion Fact ID:N:80:0|COL105:ProductName:Product Name:S:100:0
#ViewPromotedProducts.column.editable=COL1:T
#ViewPromotedProducts.deletable=ON
#ViewPromotedProducts.column.hidden=0|1|2|4|93|94|95
#ViewPromotedProducts.column.currency=28|29|31|32|33|37|38|39|40|42|43|44|48|49|50|51|52|53|54|55|57|58|59|67|68|69|70|72|73|74|78|79|80|81|82|83|85|86|87
#ViewPromotedProducts.column.percentage=11|34|35|45|60|61|62|64|75|76|88|89|90
#ViewPromotedProducts.session.cache=ON
#ViewPromotedProducts.key.column.idx=0
ViewPromotedProducts.column.trim=2:20|3:20
ViewPromotedProducts.date.format=dd/MM/yyyy
#Col:<Req_param>
ViewPromotedProducts.where.clause=COL0:fltrPromotionId:MS:=



#ViewWeeklyPromotion.table=LND.SBL_PROMOTION_BASIC
#ViewWeeklyPromotion.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from LND.SBL_PROMOTION_BASIC where <search_sql_clause>) t
#ViewWeeklyPromotion.column.mapping=COL0:PromoID:Promo ID:S|COL1:Promotion:Promotion:S|COL2:Status:Status:S|COL3:PlanningAccountName:PlanningAccountName:S|COL4:PlanningAccountLOC:PlanningAccountLOC:S|COL5:ShipmentStartDate:ShipmentStartDate:D|COL6:ShipmentEndDate:ShipmentEndDate:D|COL7:InStoreStartDate:InStoreStartDate:D|COL8:InStoreEndDate:InStoreEndDate:D|COL9:PlanningUOM:PlanningUOM:S|COL10:PercentLift:PercentLift:N|COL11:TotalQuantity:TotalQuantity:N|COL12:BaselineQuantity:BaselineQuantity:N|COL13:IncrementalQuantity:IncrementalQuantity:N|COL14:PrimaryMechanic:PrimaryMechanic:S|COL15:SecondaryMechanic:SecondaryMechanic:S|COL16:PlanName:PlanName:S|COL17:PreEvaluationComment:PreEvaluationComment:S|COL18:Feature:Feature:S|COL19:CreatedDateSrc:CreatedDateSrc:D|COL20:CreatedBySrc:CreatedBySrc:S|COL21:LastUpdateDateSrc:LastUpdateDateSrc:D|COL22:LastUpdatedBySrc:LastUpdatedBySrc:S|COL23:NaturalKey:NaturalKey:S|COL24:NaturalKeyHash:NaturalKeyHash:S|COL25:RowHash:RowHash:S|COL26:BatchID:BatchID:N|COL27:CreatedDate:CreatedDate:D|COL28:CreatedBy:CreatedBy:S|COL29:UpdatedDate:UpdatedDate:D|COL30:UpdatedBy:UpdatedBy:S
#ViewWeeklyPromotion.column.editable=COL1:T
##ViewWeeklyPromotion.deletable=ON
##ViewWeeklyPromotion.column.hidden=0
##ViewWeeklyPromotion.session.cache=ON
##ViewWeeklyPromotion.key.column.idx=0
#ViewWeeklyPromotion.date.format=dd/MM/yyyy



#MonitorDataFileStatus.table=AUX.AUDIT_PROCESS_VIEW
#MonitorDataFileStatus.query.sql=select t.* from (select <columns>, row_number() over ( order by <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from AUX.AUDIT_PROCESS_VIEW) t
#MonitorDataFileStatus.column.mapping=COL0:AuditLogId:AuditLogId:S|COL1:FileName:File Name:S|COL2:Source:Source Type:S|COL3:Status:Uploaded State:S|COL4:StartTime:Uploaded On:D|COL5:CreatedBy:Uploaded by:S|COL6:FailureReason:Failure Reason:S|COL7:Layer:Layer:S|COL8:ProcessName:ProcessName:S|COL9:EndTime:EndTime:S|COL10:RecordsRead:RecordsRead:S|COL11:RecordsWritten:RecordsWritten:S|COL12:Rejects:Rejects:S|COL13:BatchID:BatchID:S|COL14:CreatedDate:CreatedDate:S|COL15:UpdatedDate:UpdatedDate:S|COL16:UpdatedBy:UpdatedBy:S
##MonitorDataFileStatus.column.editable=COL1:T
##MonitorDataFileStatus.deletable=ON
#MonitorDataFileStatus.column.hidden=0|7|8|9|10|11|12|13|14|15|16
##MonitorDataFileStatus.session.cache=ON
##MonitorDataFileStatus.key.column.idx=0
#MonitorDataFileStatus.date.format=dd/MM/yyyy hh:mm:ss



MonitorDataFileStatus.table=AUX.AUDIT_JOBS
MonitorDataFileStatus.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select b.RejectReason,  CASE WHEN b.RejectReason is null THEN a.status else 'Failure' END Status2, a.* from aux.audit_jobs a left join AUX.DQ_REJECTS b on a.fileName = b.MainFileName and b.ProcessName = 'File Validation' where a.subjectArea in ('Sellout', 'sellin', 'Promotion') ) x where <search_sql_clause> and <where_clause>) t
MonitorDataFileStatus.column.mapping=COL0:AuditJobId:AuditJobId:S|COL1:FileName:File Name:S|COL2:SubjectArea:Source Type:S|COL3:Status2:Status:S|COL4:StartTime:Uploaded On:D|COL5:CreatedBy:Uploaded by:S|COL6:RejectReason:Failure Reason:S
#MonitorDataFileStatus.column.editable=COL1:T
#MonitorDataFileStatus.deletable=ON
MonitorDataFileStatus.column.hidden=0|7|8|9|10|11|12|13|14|15|16
#MonitorDataFileStatus.session.cache=ON
#MonitorDataFileStatus.key.column.idx=0
MonitorDataFileStatus.date.format=dd MMM yyyy hh:mm:ss
MonitorDataFileStatus.time.format=hh:mm:ss
MonitorDataFileStatus.where.clause=COL2:fltrSourceType:SS:=



#MonitorJobLogs.table=AUX.AUDIT_PROCESS_VIEW
#MonitorJobLogs.query.sql=select t.* from (select <columns>, row_number() over ( order by <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from AUX.AUDIT_PROCESS_VIEW) t
#MonitorJobLogs.column.mapping=COL0:AuditLogId:AuditLogId:S|COL1:Layer:Job Name:S|COL2:Status:State:S|COL3:StartTime:Executed On:D|COL4:FailureReason:Failure Reason:S|COL5:FileName:File Name:S|COL6:Source:Source Type:S|COL7:CreatedBy:Uploaded by:S|COL8:ProcessName:ProcessName:S|COL9:EndTime:EndTime:S|COL10:RecordsRead:RecordsRead:S|COL11:RecordsWritten:RecordsWritten:S|COL12:Rejects:Rejects:S|COL13:BatchID:BatchID:S|COL14:CreatedDate:CreatedDate:S|COL15:UpdatedDate:UpdatedDate:S|COL16:UpdatedBy:UpdatedBy:S
##MonitorJobLogs.column.editable=COL1:T
##MonitorJobLogs.deletable=ON
#MonitorJobLogs.column.hidden=0|5|6|7|8|9|10|11|12|13|14|15|16
##MonitorJobLogs.session.cache=ON
##MonitorJobLogs.key.column.idx=0
#MonitorJobLogs.date.format=dd/MM/yyyy hh:mm:ss



MonitorJobLogs.table=AUX.AUDIT_JOBS
MonitorJobLogs.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from AUX.AUDIT_JOBS where <search_sql_clause>) t
MonitorJobLogs.column.mapping=COL0:AuditJobId:AuditJobId:S|COL1:JobName:Job Name:S|COL2:Status:Status:S|COL3:StartTime:Executed On:D|COL4:FailureReason:Failure Reason:S|COL5:FileName:File Name:S|COL6:Source:Source Type:S|COL7:CreatedBy:Uploaded by:S|COL8:ProcessName:ProcessName:S|COL9:EndTime:EndTime:S|COL10:RecordsRead:RecordsRead:S|COL11:RecordsWritten:RecordsWritten:S|COL12:Rejects:Rejects:S|COL13:BatchID:BatchID:S|COL14:CreatedDate:CreatedDate:S|COL15:UpdatedDate:UpdatedDate:S|COL16:UpdatedBy:UpdatedBy:S
#MonitorJobLogs.column.editable=COL1:T
#MonitorJobLogs.deletable=ON
MonitorJobLogs.column.hidden=0|5|6|7|8|9|10|11|12|13|14|15|16
#MonitorJobLogs.session.cache=ON
#MonitorJobLogs.key.column.idx=0
MonitorJobLogs.date.format=dd MMM yyyy hh:mm:ss
MonitorJobLogs.time.format=hh:mm:ss



ViewDatasets.table=PRS.PROMOTION_FACT_DATASETS
ViewDatasets.query.sql=select t.* from ( select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select case when a.ExceptionFlag ='Y' then 'Exception' else 'Clean' end ExceptionFlag2,a.*, d.promotion, d.PromoID, d.PromotionCode, d.PromotionStartDate, d.PromotionEndDate, d.PromotionNotes from PRS.PROMOTION_FACT_DATASETS a join PRS.PROMO_DIM d on d.PromotionID = a.promotionId join PRS.DATASET_DIM e on a.datasetid = e.datasetid ) x where <search_sql_clause> and <where_clause>) t
ViewDatasets.column.mapping=COL0:PromotionFactDatasetID:PromotionFactDatasetID:N:80:0|COL1:PromotionID:Promotion ID:N:80:0|COL2:PromoID:PromoID:S:80:0|COL3:Promotion:Promotion:S:150:0|COL4:PromotionCode:Promotion Code:S:80:0|COL5:PromotionStartDate:Promotion Start Date:D:80:0|COL6:PromotionEndDate:Promotion End Date:D:80:0|COL7:PromotionNotes:Promotion Notes:S:150:0|COL8:RetailerName:Retailer Name:S:150:0|COL9:ProductID:Product ID:N:80:0|COL10:ProductName:Product Name:S:150:0|COL11:RetailerID:RetailerID:N:80:0|COL12:DATASETID:DATASETID:N:80:0|COL13:AnyPromoDollars:Any Promo Dollars:N:80:0|COL14:BaselineAnyPromoUnitVolume:Baseline Any Promo Unit Volume:N:80:0|COL15:BaselineDollars:Baseline Dollars:N:80:0|COL16:BaselineNonPromoUnitVol:Baseline Non Promo Unit Vol:N:80:2|COL17:BaseSubsidy:Base Subsidy:N:80:0|COL18:BaseTrdSpnd:Base Trade Spnd:N:80:0|COL19:COGSNSVRate:COGS NSV Rate:N:80:0|COL20:COGSUnitRate:COGS Unit Rate:N:80:0|COL21:EDLPUnitRate:EDLP Unit Rate:N:80:0|COL22:EquivalizedVolume:Equivalized Volume:N:80:0|COL23:FixedTrdSpnd:Fixed Trade Spend:N:80:0|COL24:IncrementalDollars:Incremental Dollars:N:80:0|COL25:IncrNonPromoUnitVolumeSO:Incr Non Promo Unit Volume SO:N:80:0|COL26:IncrPromoalTradeDiscUnitRate:Incr Promoal Trade Disc Unit Rate:N:80:0|COL27:IncrVolumeLiftSO:Incr Volume Lift SO:N:80:0|COL28:ListUnitPrice:List Unit Price:N:80:0|COL29:NonPromoDollars:Non Promo Dollars:N:80:0|COL30:NSVPerUnit:NSV Per Unit:N:80:0|COL31:PercentACVAnyDisplay:Percent ACV Any Display:N:80:0|COL32:PercentACVAnyFeature:Percent ACV Any Feature:N:80:2|COL33:PlanNonPromoUnitPrice:Plan Non Promo Unit Price:N:80:2|COL34:PlanPromoUnitPrice:Plan Promo Unit Price:N:80:2|COL35:PlanScanUnitQty:Plan Scan Unit Qty:N:80:0|COL36:PlanShipUnitQty:Plan Ship Unit Qty:N:80:2|COL37:PromotedDollars:Promoted Dollars:N:80:2|COL38:PrVarDiscUnitRate:Pr Var Disc Unit Rate:N:80:2|COL39:ShipmentEndWeek:Shipment End Week:N:80:0|COL40:ShipmentStartWeek:Shipment Start Week:N:80:0|COL41:TotTrdSpnd:Tot Trade Spend:N:80:2|COL42:TotUnitVolumeSO:Tot Unit Volume SO:N:80:2|COL43:TotalShippedCases:Total Shipped Cases:N:80:2|COL44:PlannedIncrementalROI:Planned Incremental ROI:N:80:2|COL45:PlannedIncrementalGrossProfit:Planned Incremental Gross Profit:N:80:2|COL46:PlannedIncrementalTurnover:PlannedIncremental Turnover:N:80:2|COL47:PlannedIncrementalNSV:Planned Incremental NSV:N:80:2|COL48:PlannedTotalNSV:Planned Total NSV:N:80:2|COL49:BaseNSV:Base NSV:N:80:2|COL50:PlannedIncrementalTradeSpend:Planned Incremental Trade Spend:N:80:2|COL51:PlannedTotalTradeSpend:Planned Total Trade Spend:N:80:2|COL52:PlannedBaseTradeSpend:Planned Base Trade Spend:N:80:2|COL53:PlannedIncrementalCOGS:Planned Incremental COGS:N:80:2|COL54:BaseCOGS:Base COGS:N:80:2|COL55:PlannedTotalCOGS:Planned Total COGS:N:80:2|COL56:PlannedPlannedROI:Planned Planned ROI:N:80:2|COL57:PlannedGrossProfit:Planned Gross Profit:N:80:2|COL58:PlannedTotalTurnover:Planned Total Turnover:N:80:2|COL59:IncrementalROISellOut:Incremental ROI SellOut:N:80:2|COL60:IncrementalGrossProfitSellOut:Incremental Gross Profit SellOut:N:80:2|COL61:IncrementalTurnoverSellOut:Incremental Turnover SellOut:N:80:2|COL62:IncrementalNSVSellOut:Incremental NSV SellOut:N:80:2|COL63:TotalNSVSellOut:Total NSV SellOut:N:80:2|COL64:IncrementalTradeSpendSellOut:Incremental Trade Spend SellOut:N:80:2|COL65:TotalTradeSpendSellOut:Total Trade Spend SellOut:N:80:2|COL66:BaseTradeSpendSellOut:Base Trade Spend SellOut:N:80:2|COL67:IncrementalCOGSSellOut:Incremental COGS SellOut:N:80:2|COL68:TotalCOGSSellOut:Total COGS SellOut:N:80:0|COL69:PlannedROISellOut:Planned ROI SellOut:N:80:2|COL70:GrossProfitSellOut:Gross Profit SellOut:N:80:0|COL71:TotalTurnoverSellOut:Total Turnover SellOut:N:80:2|COL72:IncrementalROISellIn:Incremental ROI SellIn:N:80:2|COL73:IncrementalGrossProfitSellIn:Incremental Gross Profit SellIn:N:80:2|COL74:IncrementalTurnoverSellIn:Incremental Turnover SellIn:N:80:2|COL75:IncrementalNSVSellIn:Incremental NSV SellIn:N:80:2|COL76:TotalNSVSellIn:Total NSV SellIn:N:80:2|COL77:IncrementalTradeSpendSellIn:Incremental Trade Spend SellIn:N:80:2|COL78:TotalTradeSpendSellIn:Total Trade Spend SellIn:N:80:2|COL79:BaseTradeSpendSellIn:Base Trade Spend SellIn:N:80:2|COL80:IncrementalCOGSSellIn:Incremental COGS SellIn:N:80:2|COL81:TotalCOGSSellIn:Total COGS SellIn:N:80:2|COL82:PlannedROISellIn:Planned ROI SellIn:N:80:2|COL83:GrossProfitSellIn:Gross Profit SellIn:N:80:2|COL84:TotalTurnoverSellIn:Total Turnover SellIn:N:80:2|COL85:BaseUnitVolume:Base Unit Volume:N:80:2|COL86:PlannedUnitVolume:Planned Unit Volume:N:80:2|COL87:ActualUnitVolume:Actual Unit Volume:N:80:2|COL88:ShippedUnitVolume:Shipped Unit Volume:N:80:2|COL89:GSVperUnit:GSV per Unit:N:80:2|COL90:COGSperUnit:COGS per Unit:N:80:2|COL91:ScanUnitRate:Scan Unit Rate:N:80:2|COL92:TotVarDiscUnitRate:Tot Var Disc Unit Rate:N:80:2|COL93:VarBillBackUnitRate:Var Bill Back Unit Rate:N:80:2|COL94:TotSalesValueSO:Tot Sales Value SO:N:80:2|COL95:BaseUnitVolumeSO:Base Unit Volume SO:N:80:2|COL96:IncrUnitVolumeSO:Incr Unit Volume SO:N:80:2|COL97:PromoUnitVolumeSO:Promo Unit Volume SO:N:80:2|COL98:NonPromoUnitVolumeSO:Non Promo Unit Volume SO:N:80:2|COL99:DollarShareOfCategory:Dollar Share Of Category:N:80:2|COL100:UnitShareOfCategory:Unit Share Of Category:N:80:2|COL101:PercACVAnyPromo:Perc ACV Any Promo:N:80:2|COL102:PercACVTempPriceReductionOnly:Perc ACV Temp Price Reduction Only:N:80:2|COL103:PercACVFeatwithoutDisp:Perc ACV Feat without Disp:N:80:2|COL104:PercACVDispwithoutFeat:Perc ACV Disp without Feat:N:80:2|COL105:PercACVFeatandDisp:Perc ACV Feat and Disp:N:80:2|COL106:TQMP:TQMP:N:80:2|COL107:BaseUnitPriceSO:Base Unit Price SO:N:80:2|COL108:NonPromoUnitPriceSO:Non Promo Unit PriceSO:N:80:2|COL109:PromoUnitPriceSO:Promo Unit Price SO:N:80:2|COL110:PercDisconAnyPromoUnit:Perc Disc on Any Promo Unit:N:80:2|COL111:IncrAnyPromoUnitVolumeSO:Incr Any Promo Unit Volume SO:N:80:2|COL112:ExceptionFlag2:Exception Flag:S:80:0|COL113:BusinessRuleApplied:Business Rule Applied:S:80:0
#ViewDatasets.column.editable=COL1:T
#ViewDatasets.deletable=ON
ViewDatasets.column.hidden=0|1|9|11|12
ViewDatasets.column.trim=3:20|7:20|8:20|10:20
#ViewDatasets.column.currency=30|31|32|34|35|36|39|40|41|42|43|44|45|46|47|49|50|51|52|53|54|55|56|57|58|59|60|61|62|68|69|70|71|72|73|74|75|76|77|80|81|82|83|85|86|87|88|89|90
#ViewDatasets.column.percentage=14|37|38|48|63|64|65|67|78|79|91|92|93|145
#ViewDatasets.session.cache=ON
#ViewDatasets.key.column.idx=0
ViewDatasets.date.format=dd MMM yyyy
ViewDatasets.where.clause=COL12:fltrDatasetId:SS:=|COL112:fltrStatus:MS:like|COL11:fltrCustId:MS:like|COL9:fltrProdId:MS:like|COL5:fltrInStoreDate:SS:between
ViewDatasets.sql.replace.req.param=<RetailerName>:fltrProdCategorySelect:MS:''|<bizRuleId>:fltrBizRuleId:CSVLIKEOR::BusinessRuleID



#DataAvailability.table=AUX.CUSTOMER_STATS
#DataAvailability.query.sql=select t.* from (select <columns>, row_number() over ( order by <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select a.*, (DateName( month , DateAdd( month , PromotionEndMonth , 0 ) - 1 ) + ' ' + PromotionEndYear) PromotionEndMonYr from  AUX.CUSTOMER_STATS a ) x where <search_sql_clause> and <where_clause>) t
#DataAvailability.column.mapping=COL0:CustomerStatsID:CustomerStatsID:S|COL1:Account:Account:S|COL2:PromotionEndMonth:PromotionEndMonth:S|COL3:PromotionEndMonYr:Promotion Month Year:S|COL4:PromotionEndYear:PromotionEndYear:S|COL5:ShipmentVolume:Shipment Volume:N|COL6:EPOSVolume:EPOS Volume:N|COL7:SellOutTOShipmentRatio:Ratio %:N|COL8:CurrentTOPrevMonthRatio:Diff %:N|COL9:CreatedDate:CreatedDate:S|COL10:CreatedBy:CreatedBy:S|COL11:UpdatedDate:UpdatedDate:S|COL12:UpdatedBy:UpdatedBy:S
##DataAvailability.column.editable=COL1:T
##DataAvailability.deletable=ON
#DataAvailability.column.hidden=0|2|4|9|10|11|12
##DataAvailability.session.cache=ON
#DataAvailability.key.column.idx=0
#DataAvailability.date.format=dd/MM/yyyy hh:mm:ss
##Col:<Req_param>
#DataAvailability.where.clause=COL2:month|COL4:year



DataAvailability.table=AUX.CUSTOMER_STATS
DataAvailability.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select t.Account, max(t.preShipmentVolume) preShipmentVolume,  max(t.preEPOSVolume) preEPOSVolume, max(t.preRatio) preRatio, max(t.preDiff) preDiff, max(t.curShipmentVolume) curShipmentVolume,  max(t.curEPOSVolume) curEPOSVolume, max(t.curRatio) curRatio, max(t.curDiff) curDiff from ( select promotionEndMonth, account Account, shipmentVolume preShipmentVolume, EPOSVolume preEPOSVolume, SellOutTOShipmentRatio preRatio, CurrentTOPrevMonthRatio preDiff, null curShipmentVolume, null curEPOSVolume, null curRatio, null curDiff from (select * from AUX.CUSTOMER_STATS where promotionEndMonth = <prevMonth> and promotionEndYear = <prevYear>) a union select promotionEndMonth, account Account, null preShipmentVolume, null preEPOSVolume, null preRatio, null preDiff, shipmentVolume curShipmentVolume, EPOSVolume curEPOSVolume, SellOutTOShipmentRatio curRatio, CurrentTOPrevMonthRatio curDiff from (select * from AUX.CUSTOMER_STATS where promotionEndMonth = <curMonth> and promotionEndYear = <curYear>) a ) t group by Account ) x where <search_sql_clause> and <where_clause>) t
DataAvailability.column.mapping=COL0:Account:Account:S::0|COL1:preShipmentVolume:SellIn Volume:N::0|COL2:preEPOSVolume:SellOut Volume:N::0|COL3:preRatio:Ratio %:N::2|COL4:preDiff:Diff %:N::2|COL5:curShipmentVolume:SellIn Volume:N::0|COL6:curEPOSVolume:SellOut Volume:N::0|COL7:curRatio:Ratio %:N::2|COL8:curDiff:Diff %:N::2
#DataAvailability.column.editable=COL1:T
#DataAvailability.deletable=ON
#DataAvailability.column.hidden=0|2|4|9|10|11|12
#DataAvailability.session.cache=ON
#DataAvailability.key.column.idx=0
DataAvailability.column.percentage=3|4|7|8
#DataAvailability.date.format=dd/MM/yyyy hh:mm:ss
#Col:<Req_param>
DataAvailability.where.clause=COL0:fltrAccount:MS:like
#<sql_key>:req_param:defaultValue
DataAvailability.sql.replace.req.param=<prevMonth>:prevMonth:-1|<prevYear>:prevYear:-1|<curMonth>:curMonth:-1|<curYear>:curYear:-1



OverLappingPromotionProduct.table=LND.SBL_PROMOTED_PRODUCT_SPEND
OverLappingPromotionProduct.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select x.productName, Max(x.driveTTBlock) driveTTBlock, Max(x.overlappedTTBlock) overlappedTTBlock from (select ProductName,TTBlock driveTTBlock, '' overlappedTTBlock from LND.SBL_PROMOTED_PRODUCT_SPEND where promoId='<promoDrivId>' union select ProductName, '' drivTTBlock, TTBlock overlappedTTBlock from LND.SBL_PROMOTED_PRODUCT_SPEND where promoId='<promoOverId>' ) x group by x.productName) xx where <search_sql_clause>) t 
OverLappingPromotionProduct.column.mapping=COL0:ProductName:ProductName:S::0|COL1:driveTTBlock:TTBlock:S::0|COL2:overlappedTTBlock:TTBlock:S::0
#DataAvailability.column.editable=COL1:T
#DataAvailability.deletable=ON
#DataAvailability.column.hidden=0|2|4|9|10|11|12
#DataAvailability.session.cache=ON
#DataAvailability.key.column.idx=0
#DataAvailability.date.format=dd/MM/yyyy hh:mm:ss
#Col:<Req_param>
#DataAvailability.where.clause=COL2:month|COL4:year
#<sql_key>:req_param:defaultValue
OverLappingPromotionProduct.sql.replace.req.param=<promoDrivId>:promoDrivId:-1|<promoOverId>:promoOverId:-1



ProductList.table=LND.PRODUCT_HIERARCHY_BASE
#ProductList.query.sql=select distinct b.ProdId, a.ProductName from CNF.PRODUCT_HIERARCHY_BASE a join PRS.PRODUCT_DIM b on a.TUEAN = b.TUEAN and a.CUEAN = b.CUEAN order by a.ProductName
ProductList.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select distinct '<input type="checkbox" class="dataTableCheckbox" data="' +  a.ProductName + '"  id="' + convert(varchar(25), b.ProdId) + '">' chkbox, a.ProductName from CNF.PRODUCT_HIERARCHY_BASE a join PRS.PRODUCT_DIM b on a.TUEAN = b.TUEAN and a.CUEAN = b.CUEAN ) xx where <search_sql_clause>) t
ProductList.column.mapping=COL0:chkbox:<input type="checkbox" class="selectAll"  />:S::0|COL1:ProductName:ProductName:S::0
#DataAvailability.column.editable=COL1:T
#DataAvailability.deletable=ON
#DataAvailability.column.hidden=0|2|4|9|10|11|12
#DataAvailability.session.cache=ON
#DataAvailability.key.column.idx=0
#DataAvailability.date.format=dd/MM/yyyy hh:mm:ss
#Col:<Req_param>
#DataAvailability.where.clause=COL2:month|COL4:year
#<sql_key>:req_param:defaultValue
#OverLappingPromotionProduct.sql.replace.req.param=<promoDrivId>:promoDrivId:-1|<promoOverId>:promoOverId:-1



PromotionList.table=PRS.PROMO_DIM
PromotionList.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from (select distinct '<input type="checkbox" class="dataTableCheckbox" data="(' + a.PromoId + ') ' +  a.Promotion + '"  id="' + convert(varchar(25), a.PromotionId) + '">' chkbox, a.Promotion, a.PromoId from PRS.PROMO_DIM a ) xx where <search_sql_clause>) t
PromotionList.column.mapping=COL0:chkbox:<input type="checkbox" class="selectAll"  />:S::0|COL1:PromoId:Promo ID:S::0|COL2:Promotion:Promotion:S::0

###################################

OPSOReportPromo.table=PRS.PROMO_DIM
OPSOReportPromo.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from (   select PromoId, Promotion,   '' CUEAN,   ShipmentStartDate ShipmentStartDateTime,   customerName,   PlanningAccountName,   PrimaryMechanic,   Feature,   Status,   ShipmentStartDate,   ShipmentEndDate,   InstoreStartDate,   InstoreEndDate,   PlannedTotalShippedUnits,   BaseShipmentUnits,   PlannedDipUnits,   CannibalisedUnits,   PlannedSellOutUnitVolume,   AdjustmentUnits,   '' PlannedStockOnHandCU,   TotalShippedUnits ActualTotalShipmentQtyCUPromoPeriod,   TotalScannedUnits,   ActualROI ActualROIPerc,   PlannedTotalCOGSSellIn,   ActualTotalCOGS,  PlannedTotalCOGS,  PlannedTotalGSVSellIn PlannedTotalOLVSellIn,   PlannedTotalGSV PlannedTotalOLVSellOut,   BaseGSV PlannedBaselineOLV,   '' PlannedDipOLV,   CannibalisedGSV PlannedCannibalisedOLV,   '' PlannedTradeSpend,   PlannedTotalTurnoverSellIn,   PlannedTotalTurnover,   '' PlannedPromotedTOSellOut,   '' PlannedNSVperUnit,   '' PlannedBaselineTurnover,   '' PlannedDipTO,   CannibalisedTurnover,   PlannedTotalGrossProfit,   BaseGrossProfit,   '' SellOutAdjGrossProfit,   '' PlannedDipGrossProfit,   CannibalisedGrossProfit,   PlannedROI,   cast(PreEvaluationComment as varchar(1000)) PreEvaluationComment,   VolumeUplift VolumeUpliftPerc,   ActualTotalGSVSellIn,   SecondaryMechanic,   productcategory,   productbrand,   ProductsizePackFormSizePack,   ProductSubdivision1,   AFM,   '' ActualEPOS_ShipmentQtyCU,   '' ActualEPOS_ShipmentQtyCULessPlannedDipQtyCU,   PlannedIncrementalUnitVolume,   IncrementalUnitVolume,   PlannedVolumeUplift,   VolumeUplift VolumeUplift,   PlannedFixedTradeSpend,   '' PlannedVariableCosts,   PlannedGSVperUnit,   ActualTotalGSV,   '' ActualTotalGSVLessDip,   PlannedIncrementalGSV,   ActualIncrementalGSV,   '' PlannedVariableCostsPerCU,   '' ActualTotalVariableSpend,  '' PlannedVariableTurnover,   '' PlannedVariableTurnoverPerCU,   '' ActualVariableTurnover,   '' PlannedVariableProfit,   '' PlannedVariableProfitPerCU,   '' ActualVariableProfit,   ActualTotalGrossProfit,   ActualTotalTurnover,    ActualROI,   PlannedTTSSpendAmount,   ActualTradeSpend,   PlannedIncrementalTurnover,   ActualIncrementalTurnover,   PlannedIncrementalGrossProfit,   ActualIncrementalGrossProfit,   PromoId PromoIdBlank,   1 PromoLineCount,   case when ','+replace(BusinessRules, ' ', '')+',' like '%,4,%' then 'exclude' else '' end negActualVolumeUplift,   case when ','+replace(BusinessRules, ' ', '')+',' like '%,2,%' then 'exclude' else '' end  negGSV,   case when ','+replace(BusinessRules, ' ', '')+',' like '%,3,%' then 'exclude' else '' end TTS_GSV5,   case when ','+replace(BusinessRules, ' ', '')+',' like '%,6,%' then 'exclude' else '' end pipefill,   '' EPOS_130,   '' hijackers,   '' systemsIssues,   '' CAMError,   '' obviousError,   '' INCLUDE_EXCLUDE,   '' exclusionReason,   businessRules,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,2,%' then 'exclude' else '' end ExActualGSV,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,3,%' then 'exclude' else '' end ExActualPromoSpend,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,4,%' then 'exclude' else '' end ExVolumeUplift,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,5,%' then 'exclude' else '' end ExPromoStatus,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,6,%' then 'exclude' else '' end ExPromoPreEvaluationComments,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,17,%' then 'exclude' else '' end ExOPSOROI,  case when ','+replace(BusinessRules, ' ', '')+',' like '%,18,%' then 'exclude' else '' end ExBrand,  preEvalColour,   postEvalColour,   PreEvalColour + ' to ' + PostEvalColour colourMove, '' reportingComments, 1 includedPromoCountOnly   from (  	select t.*, PreEvalColour + ' to ' + PostEvalColour colourMove   	from (  		select  min(b.PromoId) PromoId,  		min(b.AFM) AFM,  		min(b.SecondaryMechanic) SecondaryMechanic,  		min(b.PreEvaluationComment) PreEvaluationComment,  		min(b.Promotion) Promotion,  		min(ShipmentStartDate) ShipmentStartDate,  		min(ShipmentEndDate) ShipmentEndDate,  		min(InstoreStartDate) InstoreStartDate,  		min(InstoreEndDate) InstoreEndDate,  		min(PlanningAccountName) PlanningAccountName,  		min(b.PrimaryMechanic) PrimaryMechanic,  		min(Feature) Feature,  		min(c.groupings) customerName,  		min(Status) Status,  		sum(ActualTradeSpend) ActualTradeSpend,  		sum(ActualIncrementalTurnover) ActualIncrementalTurnover,  		sum(ActualIncrementalGrossProfit) ActualIncrementalGrossProfit,  		sum(PlannedTradeSpend) PlannedTTSSpendAmount,  		sum(PlannedIncrementalTurnover) PlannedIncrementalTurnover,  		sum(PlannedIncrementalGrossProfit) PlannedIncrementalGrossProfit,  		sum(PlannedTotalShippedUnits) PlannedTotalShippedUnits,  		sum(PlannedDipUnits) PlannedDipUnits,  		sum(CannibalisedUnits) CannibalisedUnits,  		sum(PlannedSellOutUnitVolume) PlannedSellOutUnitVolume,  		sum(PlannedTotalGSVSellIn) PlannedTotalGSVSellIn,  		sum(PlannedTotalGSV) PlannedTotalGSV,  		sum(PlannedTotalTurnoverSellIn) PlannedTotalTurnoverSellIn,   		sum(PlannedTotalTurnover) PlannedTotalTurnover,   		sum(CannibalisedTurnover) CannibalisedTurnover,  		sum(PlannedTotalGrossProfit) PlannedTotalGrossProfit,  		sum(BaseGrossProfit) BaseGrossProfit,  		sum(CannibalisedGrossProfit) CannibalisedGrossProfit,  		sum(PlannedROI) PlannedROI,  		sum(VolumeUplift) VolumeUplift,  		sum(ActualTotalGSVSellIn) ActualTotalGSVSellIn,  		sum(ActualTotalGSV) ActualTotalGSV,  		sum(PlannedTotalCOGSSellIn) PlannedTotalCOGSSellIn,  		sum(PlannedTotalCOGS) PlannedTotalCOGS,  		sum(PlannedVolumeUplift) PlannedVolumeUplift,  		sum(PlannedIncrementalUnitVolume) PlannedIncrementalUnitVolume,  		sum(IncrementalUnitVolume) IncrementalUnitVolume,  		sum(PlannedFixedTradeSpend) PlannedFixedTradeSpend,  		sum(PlannedGSVperUnit) PlannedGSVperUnit,  		sum(PlannedIncrementalGSV) PlannedIncrementalGSV,  		sum(ActualIncrementalGSV) ActualIncrementalGSV,  		sum(ActualTotalTurnover) ActualTotalTurnover,  		sum(ActualTotalGrossProfit) ActualTotalGrossProfit,  		sum(ActualROI) ActualROI,  		sum(BaseShipmentUnits) BaseShipmentUnits,  		sum(AdjustmentUnits) AdjustmentUnits,  		sum(TotalShippedUnits) TotalShippedUnits,  		sum(TotalScannedUnits) TotalScannedUnits,  		sum(ActualTotalCOGS) ActualTotalCOGS,  		sum(BaseGSV) BaseGSV,  		sum(CannibalisedGSV) CannibalisedGSV,  		min(e.ProductCategory) ProductCategory,  		min(e.ProductBrand) ProductBrand,  		min(e.ProductSizePackFormSizePack) ProductSizePackFormSizePack,  		min(e.ProductSubdivision1) ProductSubdivision1,      		CONVERT(varchar(100), STUFF((   			SELECT  ','+ convert(varchar(25), a1.BusinessRuleID)   			FROM PRS.PROMOTION_FACT_DATASETS a1   			WHERE a.promotionId = a1.promotionId and a1.datasetId = min(a.datasetId)  			group by a1.promotionId, a1.BusinessRuleID  			FOR XML PATH('')),1 ,1, '')) businessRules,  			  		case   			when sum(PlannedIncrementalTurnover) > 0 and sum(PlannedIncrementalGrossProfit) > 0 then 'Green'  			when sum(PlannedIncrementalTurnover) > 0 and sum(PlannedIncrementalGrossProfit) < 0 then 'Amber'  			when sum(PlannedIncrementalTurnover) <= 0 and sum(PlannedIncrementalGrossProfit) <= 0 then 'Red'  		end PreEvalColour,  		case   			when sum(ActualIncrementalTurnover) > 0 and sum(ActualIncrementalGrossProfit) > 0 then 'Green'  			when sum(ActualIncrementalTurnover) > 0 and sum(ActualIncrementalGrossProfit) < 0 then 'Amber'  			when sum(ActualIncrementalTurnover) <= 0 and sum(ActualIncrementalGrossProfit) <= 0 then 'Red'  		end PostEvalColour    		from PRS.PROMOTION_FACT_DATASETS a   			 join PRS.PROMO_DIM b on a.PromotionId = b.PromotionId and b.status = 'Finalized' and datasetId = <datasetId>  			 join PRS.PRODUCT_DIM d on a.ProductId = d.ProdId   			 join PRS.BRAND_DIM e on d.CUEAN = e.CUEAN and d.TUEAN = e.TUEAN  			 left join LND.WB_OPSO_CUSTOMER_GROUPINGS c on c.customer = a.customerName     		group by a.PromotionId  	) t  ) x ) xx where <search_sql_clause>) t
OPSOReportPromo.column.mapping=COL0:PromoId:Promotion:S:100:0|COL1:Promotion:Promotion name:S:100:0|COL2:CUEAN:CU EAN Code:S:100:0|COL3:ShipmentStartDateTime:Time ~ Shipment Start Date:S:100:0|COL4:PlanningAccountName:Account:S:100:0|COL5:PrimaryMechanic:Primary Mechanic Name:S:100:0|COL6:Feature:Promo Feature:S:100:0|COL7:Status:Promo Status:S:100:0|COL8:ShipmentStartDate:Promo Shipment Start Date:D:100:0|COL9:ShipmentEndDate:Promo Shipment End Date:D:100:0|COL10:InstoreStartDate:Promo In Store Start Date:D:100:0|COL11:InstoreEndDate:Promo In Store End Date:D:100:0|COL12:PlannedTotalShippedUnits:Planned Total Shipment Quantity CU:N:100:2|COL13:BaseShipmentUnits:Planned Promotion Baseline Qty CU:N:100:2|COL14:PlannedDipUnits:Planned Dip Qty CU:N:100:2|COL15:CannibalisedUnits:Planned Cannibalised Qty CU:N:100:2|COL16:PlannedSellOutUnitVolume:Planned Sell-Out Qty CU:N:100:2|COL17:AdjustmentUnits:Sell Out Adj Qty CU:N:100:2|COL18:PlannedStockOnHandCU:Planned Stock On Hand CU:N:100:2|COL19:ActualTotalShipmentQtyCUPromoPeriod:Actual Total Shipment Qty CU Promo Period:N:100:2|COL20:TotalScannedUnits:Actual Total Consumption Qty CU Promo Period:N:100:2|COL21:ActualROIPerc:Actual ROI %:N:100:2|COL22:PlannedTotalCOGSSellIn:Planned Total Product Cost ~ Sell-In:N:100:2|COL23:PlannedTotalCOGS:Planned Total Product Cost ~ Sell-Out:N:100:2|COL24:PlannedTotalOLVSellIn:Planned Total OLV Sell-In:N:100:2|COL25:PlannedTotalOLVSellOut:Planned Total OLV ~ Sell-Out:N:100:2|COL26:PlannedBaselineOLV:Planned Baseline OLV:N:100:2|COL27:PlannedDipOLV:Planned Dip OLV:N:100:2|COL28:PlannedCannibalisedOLV:Planned Cannibalised OLV:N:100:2|COL29:PlannedTTSSpendAmount:Planned TTS Spend Amount:N:100:2|COL30:PlannedTotalTurnoverSellIn:Planned Total Turnover Sell-In:N:100:2|COL31:PlannedTotalTurnover:Planned Total Turnover ~ Sell-Out:N:100:2|COL32:PlannedPromotedTOSellOut:Planned Promoted TO Sell Out:N:100:2|COL33:PlannedNSVperUnit:Planned Non-Promoted TO Price CU:N:100:2|COL34:PlannedBaselineTurnover:Planned Baseline Turnover:N:100:2|COL35:PlannedDipTO:Planned Dip TO:N:100:2|COL36:CannibalisedTurnover:Planned Cannibalised TO:N:100:2|COL37:PlannedTotalGrossProfit:Planned Total Profit:N:100:2|COL38:BaseGrossProfit:Planned Baseline Gross Profit:N:100:2|COL39:SellOutAdjGrossProfit:Sell Out Adj Gross Profit:N:100:2|COL40:PlannedDipGrossProfit:Planned Dip Gross Profit:N:100:2|COL41:CannibalisedGrossProfit:Planned Cann Gross Profit:N:100:2|COL42:PlannedROI:Planned ROI:N:100:2|COL43:PreEvaluationComment:Promo Pre-Evaluation Comments:S:100:2|COL44:PlannedTradeSpend:Planned Total Promo Spend:N:100:2|COL45:VolumeUpliftPerc:Actual Volume Uplift %:N:100:2|COL46:ActualTotalGSVSellIn:Actual Total GSV ~ Sell-In:N:100:2|COL47:SecondaryMechanic:Promo Mechanic Name:S:100:0|COL48:CustomerName:Customer:S:100:0|COL49:productcategory:Category:S:100:0|COL50:productbrand:Brand:S:100:0|COL51:ProductsizePackFormSizePack:Size Pack Form:S:100:0|COL52:ProductSubdivision1:Clan:S:100:0|COL53:AFM:AFM:S:100:0|COL54:ActualEPOS_ShipmentQtyCU:Actual EPOS/Shipment Qty CU:N:100:2|COL55:ActualEPOS_ShipmentQtyCULessPlannedDipQtyCU:Actual EPOS/Shipment Qty CU less Planned Dip Qty CU:N:100:2|COL56:PlannedIncrementalUnitVolume:Planned Incremental Qty CU:N:100:2|COL57:IncrementalUnitVolume:Actual Incremental Qty CU:N:100:2|COL58:PlannedVolumeUplift:Planned Volume Uplift:N:100:2|COL59:VolumeUplift:Actual Volume Uplift:N:100:2|COL60:PlannedFixedTradeSpend:Planned Fixed Costs:N:100:2|COL61:PlannedVariableCosts:Planned Variable Costs:N:100:2|COL62:PlannedGSVperUnit:Planned GSV per CU:N:100:2|COL63:ActualTotalGSV:Actual Total GSV Sell In:N:100:2|COL64:ActualTotalGSVLessDip:Actual Total GSV less Dip:N:100:2|COL65:PlannedIncrementalGSV:Planned Incremental GSV:N:100:2|COL66:ActualIncrementalGSV:Actual Incremental GSV:N:100:2|COL67:PlannedVariableCostsPerCU:Planned Variable Costs per CU:N:100:2|COL68:ActualTotalVariableSpend:Actual Total Variable Spend:N:100:2|COL69:ActualTradeSpend:Actual Total Spend:N:100:2|COL70:PlannedIncrementalTurnover:Planned Incremental Turnover:N:100:2|COL71:PlannedVariableTurnover:Planned Variable Turnover:N:100:2|COL72:PlannedVariableTurnoverPerCU:Planned Variable Turnover per CU:N:100:2|COL73:ActualVariableTurnover:Actual Variable Turnover:N:100:2|COL74:ActualTotalTurnover:Actual Total Turnover:N:100:2|COL75:ActualIncrementalTurnover:Actual Incremental Turnover:N:100:2|COL76:PlannedVariableProfit:Planned Variable Profit:N:100:2|COL77:PlannedIncrementalGrossProfit:Planned Incremental Profit:N:100:2|COL78:PlannedVariableProfitPerCU:Planned Variable Profit per CU:N:100:2|COL79:ActualVariableProfit:Actual Variable Profit:N:100:2|COL80:ActualTotalGrossProfit:Actual Total Profit:N:100:2|COL81:ActualIncrementalGrossProfit:Actual Incremental Profit:N:100:2|COL82:ActualROI:Actual ROI:N:100:2|COL83:PromoIdBlank:BLANK:S:100:0|COL84:PromoLineCount:Promo Line Count:N:100:0|COL85:negActualVolumeUplift:-ve actual volume uplift:S:100:0|COL86:negGSV:-ve/0 GSV:S:100:0|COL87:TTS_GSV5:TTS%GSV<5%:S:100:0|COL88:pipefill:pipefill:S:100:0|COL89:EPOS_130:EPOS>130%:S:100:0|COL90:hijackers:hijackers:S:100:0|COL91:systemsIssues:systems issues:S:100:0|COL92:CAMError:CAM error:S:100:0|COL93:obviousError:obvious error:S:100:0|COL94:INCLUDE_EXCLUDE:INCLUDE/ EXCLUDE:S:100:0|COL95:exclusionReason:exclusion reason:S:100:0|COL96:preEvalColour:pre-eval colour:S:100:0|COL97:postEvalColour:post-eval colour:S:100:0|COL98:colourMove:colour move:S:100:0|COL99:reportingComments:reporting comments:S:100:0|COL100:includedPromoCountOnly:included promo count only:N:100:0
OPSOReportPromo.sql.replace.req.param=<datasetId>:fltrDatasetId:SS:''



OPSOReportProduct.table=PRS.PROMO_DIM
OPSOReportProduct.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select  t1.*,   PromoMechanic PromoMechanicName,  planningAccountName Account,    ProductSizePackFormSizePack SizePackForm,  ActualROI - PlannedROI variance,  ActualTotalGSV ActualTotalGSVlessDip,  ActualTotalGrossProfit ActualTotalProfit,  IncrementalUnitVolume ActualIncrementalQtyCU,  TotalShippedUnits ActualTotalShipmentQtyCUPromoPeriod,  TotalScannedUnits ActualTotalConsumptionQtyCUPromoPeriod,  PlannedTotalShippedUnits PlannedTotalShipmentQuantityCU,  '' ActualEPOSShipmentQtyCUlessPlannedDipQtyCU,  '' difference,  BaseShipmentUnits PlannedPromotionBaselineQtyCU,  VolumeUplift ActualVolumeUplift,  VolumeUplift - PlannedVolumeUplift difference2,  PlannedTotalGSVSellIn PlannedTotalOLVSellIn,  '' variance2,  BaseGSV PlannedBaselineOLV,  ActualIncrementalGSV ActualIncrementalGSV2,  ActualTotalTurnover ActualTotalTurnover2,  '' variance3,  ActualIncrementalTurnover ActualIncrementalTurnover2,  '' variance4,  '' variance5,  PlannedTotalGrossProfit PlannedTotalProfit,  ActualTotalGrossProfit ActualTotalProfit2,  '' variance6,  '' variance7,  PreEvaluationComment PromoPreEvaluationComments,  '' reportingcomments,  1 promocount,  '' includedincrprofitonly,  '' iTOincluded,  PreEvalColour + ' to ' + PostEvalColour colourMove    from (  	select  		d.PromoId,  		d.PromoId + b.CUEAN PromoIdEAN,  		d.Promotion,  		d.feature,  		d.feature feature2,  		d.PrimaryMechanic,  		d.ShipmentStartDate,  		d.ShipmentEndDate,  		d.InStoreStartDate,  		d.InStoreEndDate,  		d.AFM,  		d.planningAccountName,  		c.ProductSubdivision1 clan,  		cast(d.PreEvaluationComment as varchar(1000)) PreEvaluationComment,  		c.ProductSubdivision1 Clan2,  		'' includedSpendOnly,  		'' includedPromoCountOnly,  		PlannedIncrementalGrossProfit,  		ActualIncrementalGrossProfit,  		ActualIncrementalGrossProfit ActualIncrementalGrossProfit2,  		PlannedTradeSpend,  		ActualTradeSpend,  		ActualTradeSpend ActualTradeSpend2,  		f.Groupings CustomerName,  		c.ProductBrand brand,  		c.ProductSizePackFormSizePack,  		c.ProductCategory,  		a.BusinessRuleID,  		a.PlannedROI,  		a.ActualROI,  		a.ActualTotalGSV,  		a.ActualIncrementalGSV,  		a.ActualTotalTurnover,  		a.ActualIncrementalTurnover,  		a.ActualTotalGrossProfit,  		a.PlannedTotalShippedUnits,  		a.PlannedVolumeUplift,  		a.VolumeUplift,  		a.ActualTotalGSVSellIn,  		a.PlannedTotalGSVSellIn,  		a.PlannedIncrementalGSV,  		a.PlannedTotalTurnoverSellIn,  		a.PlannedIncrementalTurnover,  		a.PlannedTotalGrossProfit,  		e.PromoMechanic,  		a.BaseShipmentUnits,  		a.IncrementalUnitVolume,  		a.TotalShippedUnits,  		a.TotalScannedUnits,  		a.BaseGSV,  		  		case   			when PlannedIncrementalTurnover > 0 and PlannedIncrementalGrossProfit > 0 then 'Green'  			when PlannedIncrementalTurnover > 0 and PlannedIncrementalGrossProfit < 0 then 'Amber'  			when PlannedIncrementalTurnover <= 0 and PlannedIncrementalGrossProfit <= 0 then 'Red'  		end PreEvalColour,  		case   			when ActualIncrementalTurnover > 0 and ActualIncrementalGrossProfit > 0 then 'Green'  			when ActualIncrementalTurnover > 0 and ActualIncrementalGrossProfit < 0 then 'Amber'  			when ActualIncrementalTurnover <= 0 and ActualIncrementalGrossProfit <= 0 then 'Red'  		end PostEvalColour,  		case when a.BusinessRuleID is not null then 'exclude' else 'include' end INCLUDE_EXCLUDE  	  	from PRS.PROMOTION_FACT_DATASETS a  		 join PRS.PROMO_DIM d on a.PromotionId = d.PromotionId and d.status = 'Finalized' and a.DatasetId = <datasetId>   		 join PRS.PRODUCT_DIM b on a.ProductId = b.ProdId  		 join PRS.BRAND_DIM c on b.CUEAN = c.CUEAN and b.TUEAN = c.TUEAN  		 left join LND.WB_PROMO_MECHANIC e on e.PromoId = d.PromoId and b.CUEAN = e.CUEAN and b.TUEAN = e.TUEAN  		 left join LND.WB_OPSO_CUSTOMER_GROUPINGS f on f.customer = a.customerName   ) t1 ) xx where <search_sql_clause>) t
OPSOReportProduct.column.mapping=COL0:PromoIdEAN:Promo ID & EAN Code:S:80:0|COL1:PromoId:Promotion ID:S:80:0|COL2:Promotion:Promotion name:S:80:0|COL3:PromoMechanicName:Promo Mechanic Name:S:80:0|COL4:feature:Promo Feature:S:80:0|COL5:CustomerName:Customer:S:80:0|COL6:Account:Account:S:80:0|COL7:Clan:Clan:S:80:0|COL8:ProductCategory:Category:S:80:0|COL9:Brand:Brand:S:80:0|COL10:SizePackForm:Size Pack Form:S:80:0|COL11:INCLUDE_EXCLUDE:INCLUDE/ EXCLUDE:S:80:0|COL12:PlannedROI:Planned ROI:N:80:2|COL13:ActualROI:Actual ROI:N:80:2|COL14:variance:variance:N:80:2|COL15:PreEvalColour:pre-eval colour:S:80:0|COL16:PostEvalColour:post-eval colour:S:80:0|COL17:colourMove:colour move:S:80:0|COL18:PrimaryMechanic:Primary Mechanic Name:S:80:0|COL19:feature2:Promo Feature2:S:80:0|COL20:ShipmentStartDate:Promo Shipment Start Date:D:80:0|COL21:ShipmentEndDate:Promo Shipment End Date:D:80:0|COL22:InStoreStartDate:Promo In Store Start Date:D:80:0|COL23:InStoreEndDate:Promo In Store End Date:D:80:0|COL24:ActualTotalGSVlessDip:Actual Total GSV less Dip:N:80:2|COL25:ActualIncrementalGSV:Actual Incremental GSV:N:80:2|COL26:ActualTradeSpend:Actual Total Spend:N:80:2|COL27:ActualTotalTurnover:Actual Total Turnover:N:80:2|COL28:ActualIncrementalTurnover:Actual Incremental Turnover:N:80:2|COL29:ActualTotalProfit:Actual Total Profit:N:80:2|COL30:ActualIncrementalGrossProfit:Actual Incremental Profit:N:80:2|COL31:ActualIncrementalQtyCU:Actual Incremental Qty CU:N:80:2|COL32:ActualTotalShipmentQtyCUPromoPeriod:Actual Total Shipment Qty CU Promo Period:N:80:2|COL33:ActualTotalConsumptionQtyCUPromoPeriod:Actual Total Consumption Qty CU Promo Period  :N:80:2|COL34:PlannedTotalShipmentQuantityCU:Planned Total Shipment Quantity CU:N:80:2|COL35:ActualEPOSShipmentQtyCUlessPlannedDipQtyCU:Actual EPOS/Shipment Qty CU less Planned Dip Qty CU:N:80:2|COL36:difference:difference:N:80:2|COL37:PlannedPromotionBaselineQtyCU:Planned Promotion Baseline Qty CU:N:80:2|COL38:PlannedVolumeUplift:Planned Volume Uplift:N:80:2|COL39:ActualVolumeUplift:Actual Volume Uplift:N:80:2|COL40:difference2:difference2:N:80:2|COL41:PlannedTotalOLVSellIn:Planned Total OLV Sell-In:N:80:2|COL42:ActualTotalGSVSellIn:Actual Total GSV Sell In:N:80:2|COL43:variance2:variance2:N:80:2|COL44:PlannedBaselineOLV:Planned Baseline OLV:N:80:2|COL45:PlannedIncrementalGSV:Planned Incremental GSV:N:80:2|COL46:ActualIncrementalGSV2:Actual Incremental GSV2:N:80:2|COL47:PlannedTotalTurnoverSellIn:Planned Total Turnover Sell-In:N:80:2|COL48:ActualTotalTurnover2:Actual Total Turnover2:N:80:2|COL49:variance3:variance3:N:80:2|COL50:PlannedIncrementalTurnover:Planned Incremental Turnover:N:80:2|COL51:ActualIncrementalTurnover2:Actual Incremental Turnover2:N:80:2|COL52:variance4:variance4:N:80:2|COL53:PlannedTradeSpend:Planned TTS Spend Amount:N:80:2|COL54:ActualTradeSpend2:Actual Total Spend2:N:80:2|COL55:variance5:variance5:N:80:2|COL56:PlannedTotalProfit:Planned Total Profit:N:80:2|COL57:ActualTotalProfit2:Actual Total Profit2:N:80:2|COL58:variance6:variance6:N:80:2|COL59:PlannedIncrementalGrossProfit:Planned Incremental Profit:N:80:2|COL60:ActualIncrementalGrossProfit2:Actual Incremental Profit2:N:80:2|COL61:variance7:variance7:N:80:2|COL62:PromoPreEvaluationComments:Promo Pre-Evaluation Comments:S:80:2|COL63:reportingcomments:reporting comments:N:80:2|COL64:promocount:promo count:N:80:2|COL65:includedincrprofitonly:included incr profit only:N:80:2|COL66:includedSpendOnly:included spend only:N:80:2|COL67:includedPromoCountOnly:included promo count only:N:80:2|COL68:iTOincluded:iTO included:S:80:0|COL69:Clan2:Clan2:S:80:0|COL70:AFM:AFM:S:80:0
OPSOReportProduct.sql.replace.req.param=<datasetId>:fltrDatasetId:SS:''


############################## TABLE LNK.PROD_MAP ##############################
MappingData.table=LNK.PROD_MAP
MappingData.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from (select	distinct case when c.ProdId is null then 'UnMapped' else 'Mapped' end Mapping,  Weightage, b.ExtProdID, b.SourceId, b.ExtProdID extProdCode,  c.prodId intProdId, c.ProductCode intProdCode, c.ProductName intProdName, b.Category, b.ExtProductNameNonUnilever ExtProdName, case when c.ProdId is null then 'CUSTOM-' + convert(varchar(10), b.ExtProdID) else '' end as suggProdName  from	CNF.EXT_PRODUCT_MASTER b  	 		left join LNK.PROD_MAP a on a.ExtProdID=b.ExtProdID  	 		left join LNK.PROD_DIM c on a.ProdId = c.ProdId  where	b.ProductName is not null and isNULL(ignored, 'N') != 'Y') x where <search_sql_clause> and <where_clause>) t
#MappingData.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select distinct case when a.BrandFormID is null then 'UnMapped' else 'Mapped' end Mapping, b.ExtProdID ExtProdID, b.SourceId, b.Category, b.Brand extBrand, c.BrandMasterID BrandFormID, c.Brand Brand from CNF.EXT_PRODUCT_MASTER b left join LNK.PROD_MAP a on a.ExtProdID = b.ExtProdID left join CNF.BRAND_MASTER c on a.BrandFormID = c.BrandMasterID where isNULL(ignored, 'N') != 'Y' ) x where <search_sql_clause> and <where_clause>) t
MappingData.column.mapping=COL0:ExtProdID:External Product ID:S::|COL1:SourceId:Source Id:N::|COL2:ExtProdCode:External Product Code:S::|COL3:ExtProdName:External Product Name:S::|COL4:IntProdID:Internal Product ID:S::|COL5:IntProdCode:Internal Product Code:S::|COL6:IntProdName:Internal Product Name:S::|COL7:Weightage:Confidence:N::2|COL8:Mapping:Mapping:S::|COL9:Category:Category:S::|COL10:suggProdName:suggProdName:S::
#MappingData.column.mapping=COL0:ExtProdID:ExtProdID:S|COL1:BrandFormID:BrandFormID:S|COL2:SourceId:Source Id:N|COL3:Category:Category:S|COL4:extBrand:<label id="prodSourceLbl"></label> Brand:S|COL5:Brand:Unilever Brand:S|COL6:Mapping:Mapping:S
#MappingData.column.editable=COL1:T|COL2:T
#MappingData.deletable=ON
MappingData.column.hidden=0|1|2|4|8|9|10
MappingData.column.percentage=7
#MappingData.session.cache=ON
#MappingData.key.column.idx=0
MappingData.date.format=dd MMM yyyy hh:mm:ss
MappingData.time.format=hh:mm:ss
MappingData.where.clause=COL8:fltrMapping:SS:=|COL1:fltrSourceId:SS:=
#|COL9:fltrCategory:MS:=
#MappingData.action.column.position=LAST
MappingData.sort.manual=5|6|7



CustMappingData.table=LNK.CUST_MAP
CustMappingData.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( select	distinct case when b.CustID is null then 'UnMapped' else 'Mapped' end Mapping, a.ExtCustID ExtCustID, a.SourceId SourceId, a.CustomerName ExtCustName, a.CustCode ExtCustCode, c.CustID intCustId, c.CustomerName intCustName, c.CustomerCode intCustCode, b.weightage weightage, case when b.CustID is null then 'CUSTOM-' + convert(varchar(10), a.ExtCustID) else '' end as suggCustName  from	CNF.EXT_CUSTOMER_MASTER a  	 		left join LNK.CUST_MAP b on a.ExtCustID = b.ExtCustID 	 		left join LNK.CUST_DIM c on b.CustID = c.CustID ) x where <search_sql_clause> and <where_clause>) t
CustMappingData.column.mapping=COL0:SourceId:SourceId:N::|COL1:Mapping:Mapping:S::|COL2:ExtCustID:ExtCustID:N::|COL3:ExtCustCode:ExtCustCode:S::|COL4:ExtCustName:External Customer Name:S::|COL5:intCustId:Internal Customer Id:N::|COL6:intCustCode:Internal Customer Code:S::|COL7:intCustName:Internal Customer Name:S::|COL8:weightage:Confidence:N::2|COL9:suggCustName:suggCustName:S::
#CustMappingData.column.editable=COL1:T|COL2:T
#CustMappingData.deletable=ON
CustMappingData.column.hidden=0|1|2|3|5|9
CustMappingData.column.percentage=8
#CustMappingData.session.cache=ON
#CustMappingData.key.column.idx=0
CustMappingData.date.format=dd MMM yyyy hh:mm:ss
CustMappingData.time.format=hh:mm:ss
CustMappingData.where.clause=COL0:fltrSourceId:SS:=|COL1:fltrMapping:SS:=|
#CustMappingData.action.column.position=LAST
CustMappingData.sort.manual=6|7|8

#====================  Reprocess ==================================

ReprocessPromotions.table=LND.PROCESS_PROMOTION_LIST
ReprocessPromotions.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( SELECT ppl.*, b.promotion from LND.PROCESS_PROMOTION_LIST ppl join PRS.PROMO_DIM b on ppl.promoId=b.promoId where  ppl.AdhocChange is not null or ppl.MetricChange is not null or ppl.AlignChange is not null ) x where <search_sql_clause> and <where_clause>) t
ReprocessPromotions.column.mapping=COL0:PromoId:PromoId:S|COL1:Promotion:Promotion:S|COL2:SellInChange:SellIn Trigger:S|COL3:SellOutChange:SellOut Trigger:S|COL4:AlignChange:Date Alignment:S|COL5:MetricChange:Data Override:S|COL6:AdhocChange:Adhoc:S|COL7:UpdatedBy:UpdatedBy:S|COL8:UpdatedDate:UpdatedDate:D
ReprocessPromotions.column.editable=COL2:CB:Y|COL3:CB:Y|COL4:CB|COL5:CB|COL6:CB
ReprocessPromotions.key.column.idx=0
#ReprocessPromotions.deletable=ON
ReprocessPromotions.column.hidden=2|3|7|8
#ReprocessPromotions.column.currency=21|22|23|25|26|27|28|29|30|32|33|34|35|37|38|40|41|42|43|44|45|46|47|48|49|50|51|52|53|57|60|61|62|63|64|65|66|67|68|71|73|74|75|76|77|79|80|81|83
#ReprocessPromotions.column.percentage=5|28|29|39|54|55|56|58|84|69|70|82|83|84
#ReprocessPromotions.session.cache=ON
#ReprocessPromotions.key.column.idx=0
#ReprocessPromotions.date.format=dd/MM/yyyy
#Col:<Req_param>
#ReprocessPromotions.where.clause=COL86:fltrStatus:MS:like|COL4:fltrCustId:MS:like|COL2:fltrProdId:MS:like|COL87:fltrInStoreDate:SS:between
#ReprocessPromotions.where.clause=COL86:fltrStatus:MS:like|COL97:fltrPromoStatus:MS:like
#|COL87:fltrInStoreDate:SS:between|COL89:fltrPromoType:SS:=
#ReprocessPromotions.sql.replace.req.param=<prodCategory>:fltrProdCategorySelect:MS:''|<prodBrand>:fltrProdBrandSelect:MS:''|<bizRule>:fltrBizRuleSelect:MS:''|<fltrProd>:fltrProdId:MS:''|<fltrCust>:fltrCustId:MS:''|<fltrDateRange>:fltrInStoreDate:between:''|<promoType>:fltrPromoType:SS:''


######################################

DQ_REJECTS.table=AUX.DQ_REJECTS
DQ_REJECTS.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from (select * from AUX.DQ_REJECTS where status not in ('Fixed', 'Ignored')) x where <search_sql_clause> and <where_clause>) t
DQ_REJECTS.column.mapping=COL0:Layer:Layer:S|COL1:ProcessName:Process Name:S|COL2:MainFileName:Main FileName:S|COL3:LoadDate:Load Date:D|COL4:RejectedRecord:Rejected Record:S|COL5:RejectReason:Reject Reason:S|COL6:CreatedDate:Created Date:D|COL7:CreatedBy:Created By:S|COL8:RejectID:RejectID:S|COL9:Status:Status:S
DQ_REJECTS.column.editable=COL9:S
DQ_REJECTS.deletable=ON
DQ_REJECTS.column.hidden=8
DQ_REJECTS.column.trim=5:15
DQ_REJECTS.key.column.idx=8
DQ_REJECTS.date.format=dd MMM yyyy hh:mm:ss
DQ_REJECTS.time.format=hh:mm:ss
DQ_REJECTS.action.column.position=LAST
#DQ_REJECTS.audit.column.add=6:D|7:U
#DQ_REJECTS.audit.column.update=6:D|7:U
DQ_REJECTS.where.clause=COL1:fltrProcess:SS:=|COL2:fltrFile:sS:=|COL5:fltrIssue:SS:=|COL3:fltrdataQualityDate:SS:between
############################## XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ##############################

ManageBusinessRules.table=PRS.BUSINESS_RULES
ManageBusinessRules.query.sql=select t.* from (select <columns>, row_number() over ( order by CASE WHEN <sort_col> IS NULL THEN 1 ELSE 0 END asc, <sort_col> <sort_dir> ) rn, count(*) over () tot_cnt from ( SELECT min(b.RuleId) RuleId, a.RuleName, min(b.RuleDescription) Description, min(b.isEnabled) IsEnabled, CONVERT(varchar(2000), STUFF(( SELECT ' AND ' + RuleColumn + ' ' + RuleOperator + ' ' + RuleValue FROM PRS.BUSINESS_RULES b WHERE b.RuleName = a.RuleName FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)'), 1, 5, '' )) as Constraints, CONVERT(varchar(2000), STUFF(( SELECT distinct ' AND ' + ActionColumn + ' = ' + ActionValue FROM PRS.BUSINESS_RULES b WHERE b.RuleName = a.RuleName FOR XML PATH(''), root('MyString'), type).value('/MyString[1]','varchar(max)'), 1, 5, '' )) as ActionColumn, MIN(a.UpdatedDate) UpdatedDate, MIN(a.UpdatedBy) UpdatedBy, MIN(a.CreatedDate) CreatedDate, MIN(a.CreatedBy) CreatedBy FROM PRS.BUSINESS_RULES_META b JOIN PRS.BUSINESS_RULES a ON a.RuleName = b.RuleShortDesc where isNull(isDeleted, 'N') != 'Y' GROUP BY RuleName ) x where <search_sql_clause> and <where_clause>) t
ManageBusinessRules.column.mapping=COL0:RuleName:Rule Name:S|COL1:Description:Description:S|COL2:Constraints:Constraints:S|COL3:ActionColumn:Action Column:S|COL4:IsEnabled:Is Enabled:S|COL5:CreatedDate:Created Date:D|COL6:CreatedBy:Created By:S|COL7:UpdatedDate:Upadted Date:D|COL8:UpdatedBy:Updated By:S
#ManageBusinessRules.column.editable=COL9:S
#ManageBusinessRules.deletable=ON
ManageBusinessRules.column.hidden=4|5|6|7|8
ManageBusinessRules.column.trim=2:25|3:25
ManageBusinessRules.key.column.idx=0
ManageBusinessRules.date.format=dd MMM yyyy hh:mm:ss
ManageBusinessRules.time.format=hh:mm:ss
ManageBusinessRules.action.column.position=LAST
#ManageBusinessRules.audit.column.add=6:D|7:U
#ManageBusinessRules.audit.column.update=6:D|7:U
#ManageBusinessRules.where.clause=COL1:fltrProcess:SS:=|COL2:fltrFile:sS:=|COL5:fltrIssue:SS:=|COL3:fltrdataQualityDate:SS:between
